# API Version: 13.2.1.1

# This file is generated by `make_provider_coffee.py`
#   from `provider.template.coffee` and `api.yaml`

# DO NOT HAND EDIT THIS FILE!

module.exports =
  selector: '.source.tts.lua'
  disableForSelector: '.source.tts.lua .comment'
  filterSuggestions: true

  # This will take priority over the default provider, which has a priority of 0.
  # `excludeLowerPriority` will suppress any providers with a lower priority
  # i.e. The default provider will be suppressed
  inclusionPriority: 2
  excludeLowerPriority: true

  getSuggestions: ({editor, bufferPosition, scopeDescriptor, prefix}) ->
    new Promise (resolve) ->
      # Find your suggestions here
      suggestions = []

      # Substring up until this position
      line = editor.getTextInRange([[bufferPosition.row, 0], bufferPosition])

      # Hacks. Make Lua nicer.
      if atom.config.get('tabletopsimulator-lua.hacks.incrementals') != 'off'
        matches = line.match(/^\s*([\w.:\[\]"'#]+)(\s*)([-+*\u002f])=(\s*)(.*)$/)
        if matches
          identifier = matches[1]
          spacing    = matches[2]
          if spacing == '' and atom.config.get('tabletopsimulator-lua.hacks.incrementals') == 'spaced'
            spacing = ' '
          operator   = matches[3]
          postfix    = matches[5]
          #if postfix != ''
          #  postfix += '\n'
          resolve([{
            snippet: spacing + '=' + spacing + identifier + spacing + operator + spacing + postfix + '$1'
            displayText: '=' + spacing + identifier + spacing + operator + spacing + postfix
            replacementPrefix: matches[2] + matches[3] + '=' + matches[4] + matches[5]
            neverFilter: true
          }])
          return

      #console.log scopeDescriptor.scopes[1]
      if scopeDescriptor.scopes[1] == "keyword.operator.lua" || scopeDescriptor.scopes[1] == "string.quoted.double.lua" || scopeDescriptor.scopes[1] == "string.quoted.single.lua"
        resolve([])
        return

      # Are we in the global script or an object script?
      global_script = editor.getPath().endsWith('-1.ttslua')

      # Split line into bracket depths
      depths = {}
      depth = 0
      depths[depth] = ""
      returned_to_depth = ""
      returning_from = ""
      bracket_lookup = {"]":"[]", "}":"{}", ")":"()"}
      for c in line
        if c.match(/[\(\{\[]/) #open bracket
            depth += 1
            if depth of depths
              returned_to_depth = true
              returning_from = " "
            else
              depths[depth] = ""
        else if c.match(/[\)\}\]]/) #close bracket
            depth -= 1
            if depth of depths
              returned_to_depth = true
              returning_from = bracket_lookup[c]
            else
              depths[depth] = ""
        else
          if returned_to_depth
            depths[depth] += returning_from   #indicator of where we just were
            returned_to_depth = false
          depths[depth] += c
      depths[depth] += returning_from

      # Split relevant depth into tokens
      tokens = depths[depth].split(".")
      this_token = ""           # user is currently typing
      this_token_intact = true  # is it just alphanumerics?
      previous_token = ""       # last string before a '.'
      previous_token_2 = ""     # ...and the one before that
      if tokens.length > 0
        this_token = tokens.slice(-1)[0]
        if this_token.match(/[^a-zA-Z0-9_]+/)
          this_token_intact = false
        if tokens.length > 1
          for part in tokens.slice(-2)[0].split(/[^a-zA-Z0-9_\[\]\{\}\(\)]+/).reverse() #find the last alphanumeric string
            if part != ""
              previous_token = part
              break
          if tokens.length > 2
            for part in tokens.slice(-3)[0].split(/[^a-zA-Z0-9_\[\]\{\}\(\)]+/).reverse()
              if part != ""
                previous_token_2 = part
                break

      #console.log tokens
      #console.log this_token, "(", this_token_intact, ") <- ", previous_token, " <- ", previous_token_2

      if prefix == "." and previous_token.match(/^[0-9]$/)
        # If we're in the middle of typing a number then suggest nothing on .
        resolve([])
        return
      else if (line.match(/(^|\s)else$/) || line.match(/(^|\s)elseif$/) || line.match(/(^|\s)end$/) || line == "end")
        # Short circuit some common lua keywords
        resolve([])
        return

      match_exact = (name) ->
        return ((prefix == "." || scopeDescriptor.scopes[1] == "variable.other.lua") && previous_token == name) || line.endsWith(name + ".") || (previous_token == name && this_token_intact)

      match_ending = (name) ->
        return ((prefix == "." || scopeDescriptor.scopes[1] == "variable.other.lua") && previous_token.endsWith(name)) || line.endsWith(name + ".") || (previous_token.endsWith(name) && this_token_intact)


      # Section: Control blocks
      if (line.endsWith(" do"))
        suggestions = [
          {
            snippet: 'do\n\t$1\nend'
            displayText: 'do...end'
          },
        ]
      else if (line.endsWith(" then") and not line.includes("elseif"))
        suggestions = [
          {
            snippet: 'then\n\t$1\nend'
            displayText: 'then...end'
          },
        ]
      else if (line.endsWith(" repeat"))
        suggestions = [
          {
            snippet: 'repeat\n\t$1\nuntil $2'
            displayText: 'repeat...until'
          },
        ]
      else if (line.includes("function") && line.endsWith(")"))
        function_name = this_token.substring(0, this_token.lastIndexOf("("))
        function_name = function_name.substring(function_name.lastIndexOf(" ") + 1)
        function_name = function_name + atom.config.get('tabletopsimulator-lua.style.coroutinePostfix')
        suggestions = [
          {
            snippet: '\n\t$1\nend'
            displayText: 'function...end'
          },
          {
            snippet: '\n\tfunction ' + function_name + "()\n\t\t$1\n\t\treturn 1\n\tend\n\tstartLuaCoroutine(self, '" + function_name + "')\nend"
            displayText: 'function...coroutine...end'
          },
          {
            snippet: '\n\tfunction ' + function_name + "()\n\t\trepeat\n\t\t\tcoroutine.yield(0)\n\t\tuntil $1\n\t\treturn 1\n\tend\n\tstartLuaCoroutine(self, '" + function_name + "')\nend"
            displayText: 'function...coroutine...repeat...end'
          },
        ]

      else if match_exact("Action")
        suggestions = [
          {
            snippet: 'Copy'
            displayText: 'Copy'
            type: 'constant'
            leftLabel: 'Action'
            description: 'Copy (or commence cloning) the targets.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onplayeraction-actions'
          },
          {
            snippet: 'Cut'
            displayText: 'Cut'
            type: 'constant'
            leftLabel: 'Action'
            description: 'Cut (copy and delete) the targets.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onplayeraction-actions'
          },
          {
            snippet: 'Delete'
            displayText: 'Delete'
            type: 'constant'
            leftLabel: 'Action'
            description: 'Delete the targets.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onplayeraction-actions'
          },
          {
            snippet: 'FlipIncrementalLeft'
            displayText: 'FlipIncrementalLeft'
            type: 'constant'
            leftLabel: 'Action'
            description: 'Incrementally rotate the targets counter-clockwise around their flip axes, typically the scene\'s Z-axis.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onplayeraction-actions'
          },
          {
            snippet: 'FlipIncrementalRight'
            displayText: 'FlipIncrementalRight'
            type: 'constant'
            leftLabel: 'Action'
            description: 'Incrementally rotate the targets clockwise around their flip axes, typically the scene\'s Z-axis.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onplayeraction-actions'
          },
          {
            snippet: 'FlipOver'
            displayText: 'FlipOver'
            type: 'constant'
            leftLabel: 'Action'
            description: 'Rotate the targets 180 degrees around their flip axes, typically the scene\'s Z-axis i.e. toggle the targets between face up and face down.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onplayeraction-actions'
          },
          {
            snippet: 'Group'
            displayText: 'Group'
            type: 'constant'
            leftLabel: 'Action'
            description: 'Group the targets.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onplayeraction-actions'
          },
          {
            snippet: 'Paste'
            displayText: 'Paste'
            type: 'constant'
            leftLabel: 'Action'
            description: 'Paste (spawn) the targets.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onplayeraction-actions'
          },
          {
            snippet: 'PickUp'
            displayText: 'PickUp'
            type: 'constant'
            leftLabel: 'Action'
            description: 'Pick up the targets.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onplayeraction-actions'
          },
          {
            snippet: 'Randomize'
            displayText: 'Randomize'
            type: 'constant'
            leftLabel: 'Action'
            description: 'Randomize the targets.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onplayeraction-actions'
          },
          {
            snippet: 'RotateIncrementalLeft'
            displayText: 'RotateIncrementalLeft'
            type: 'constant'
            leftLabel: 'Action'
            description: 'Rotate the targets incrementally, typically counter-clockwise around the scene\'s Y-axis. Instead of being rotated exclusively around the Y-axis, dice will be rotated to the previous rotation value.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onplayeraction-actions'
          },
          {
            snippet: 'RotateIncrementalRight'
            displayText: 'RotateIncrementalRight'
            type: 'constant'
            leftLabel: 'Action'
            description: 'Rotate the targets incrementally, typically clockwise around the scene\'s Y-axis. Instead of being rotated exclusively around the Y-axis, dice will be rotated to the next rotation value.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onplayeraction-actions'
          },
          {
            snippet: 'RotateOver'
            displayText: 'RotateOver'
            type: 'constant'
            leftLabel: 'Action'
            description: 'Rotate the targets 180 degrees around the scene\'s Y-axis.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onplayeraction-actions'
          },
          {
            snippet: 'Select'
            displayText: 'Select'
            type: 'constant'
            leftLabel: 'Action'
            description: 'Add the targets to the player\'s selection.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onplayeraction-actions'
          },
          {
            snippet: 'Under'
            displayText: 'Under'
            type: 'constant'
            leftLabel: 'Action'
            description: 'Move the targets underneath objects below them on table.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onplayeraction-actions'
          },
        ]

      else if match_exact("AssetBundle")
        suggestions = [
          {
            snippet: 'getLoopingEffectIndex()'
            displayText: 'getLoopingEffectIndex()'
            type: 'function'
            leftLabel: 'int'
            description: 'Index of the currently looping effect. Indexes starts at 0.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/assetbundle/#getloopingeffectindex'
          },
          {
            snippet: 'getLoopingEffects()'
            displayText: 'getLoopingEffects()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns a Table with the keys "index" and "name" for each looping effect.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/assetbundle/#getloopingeffects'
          },
          {
            snippet: 'getLoopingEffects()\n\t' +
              '-- returns {{\n\t' +
              '--    index                     int,\n\t' +
              '--    name                      string\n' +
              '\t-- }}'
            displayText: 'getLoopingEffects({{int index, string name}})'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns a Table with the keys "index" and "name" for each looping effect.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/assetbundle/#getloopingeffects'
          },
          {
            snippet: 'getTriggerEffects()'
            displayText: 'getTriggerEffects()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns a Table with the keys "index" and "name" for each trigger effect.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/assetbundle/#gettriggereffects'
          },
          {
            snippet: 'getTriggerEffects()\n\t' +
              '-- returns {{\n\t' +
              '--    index                     int,\n\t' +
              '--    name                      string\n' +
              '\t-- }}'
            displayText: 'getTriggerEffects({{int index, string name}})'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns a Table with the keys "index" and "name" for each trigger effect.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/assetbundle/#gettriggereffects'
          },
          {
            snippet: 'playLoopingEffect(${1:int|index})'
            displayText: 'playLoopingEffect(int index)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Starts playing a looping effect. Indexes starts at 0.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/assetbundle/#playloopingeffect'
          },
          {
            snippet: 'playTriggerEffect(${1:int|index})'
            displayText: 'playTriggerEffect(int index)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Starts playing a trigger effect. Indexes starts at 0.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/assetbundle/#playtriggereffect'
          },
        ]

      else if match_exact("Backgrounds")
        suggestions = [
          {
            snippet: 'getBackground()'
            displayText: 'getBackground()'
            type: 'function'
            leftLabel: 'string'
            description: 'Returns the current background name.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/backgrounds/#getbackground'
          },
          {
            snippet: 'getCustomURL()'
            displayText: 'getCustomURL()'
            type: 'function'
            leftLabel: 'string'
            description: 'Returns the image URL of the current custom background, or nil if the current background is not custom.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/backgrounds/#getcustomurl'
          },
          {
            snippet: 'setBackground(${1:string|name})'
            displayText: 'setBackground(string name)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Replaces the current background with the background matching the specified name.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/backgrounds/#setbackground'
          },
          {
            snippet: 'setCustomURL(${1:string|url})'
            displayText: 'setCustomURL(string url)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Replaces the current background with a custom background loaded from the specified url.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/backgrounds/#setcustomurl'
          },
        ]

      else if match_exact("bit32")
        suggestions = [
          {
            snippet: 'arshift(${1:int|x}, ${2:int|disp})'
            displayText: 'arshift(int x, int disp)'
            type: 'function'
            leftLabel: 'int'
            description: 'Returns the number x shifted disp bits to the right.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-bit32.arshift'
          },
          {
            snippet: 'band(${1:any|...})'
            displayText: 'band(any ...)'
            type: 'function'
            leftLabel: 'int'
            description: 'Returns the bitwise and of its operands.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-bit32.band'
          },
          {
            snippet: 'bnot(${1:int|x})'
            displayText: 'bnot(int x)'
            type: 'function'
            leftLabel: 'int'
            description: 'Returns the bitwise not of x.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-bit32.bnot'
          },
          {
            snippet: 'bor(${1:any|...})'
            displayText: 'bor(any ...)'
            type: 'function'
            leftLabel: 'int'
            description: 'Returns the bitwise or of its operands.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-bit32.bor'
          },
          {
            snippet: 'btest(${1:any|...})'
            displayText: 'btest(any ...)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Returns a bool signaling whether the bitwise and of its operands is different from zero.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-bit32.btest'
          },
          {
            snippet: 'bxor(${1:any|...})'
            displayText: 'bxor(any ...)'
            type: 'function'
            leftLabel: 'int'
            description: 'Returns the bitwise xor of its operands.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-bit32.bxor'
          },
          {
            snippet: 'extract(${1:int|n}, ${2:int|field}, ${3:int|width})'
            displayText: 'extract(int n, int field, int width)'
            type: 'function'
            leftLabel: 'int'
            description: 'Returns the unsigned number formed by the bits field to field + width - 1 from n.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-bit32.extract'
          },
          {
            snippet: 'lrotate(${1:int|x}, ${2:int|disp})'
            displayText: 'lrotate(int x, int disp)'
            type: 'function'
            leftLabel: 'int'
            description: 'Returns the number x rotated disp bits to the left.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-bit32.lrotate'
          },
          {
            snippet: 'lshift(${1:int|x}, ${2:int|disp})'
            displayText: 'lshift(int x, int disp)'
            type: 'function'
            leftLabel: 'int'
            description: 'Returns the number x shifted disp bits to the left.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-bit32.lshift'
          },
          {
            snippet: 'replace(${1:int|n}, ${2:int|v}, ${3:int|field}, ${4:int|width})'
            displayText: 'replace(int n, int v, int field, int width)'
            type: 'function'
            leftLabel: 'int'
            description: 'Returns a copy of n with the bits field to field + width - 1 replaced by the value v.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-bit32.replace'
          },
          {
            snippet: 'rrotate(${1:int|x}, ${2:int|disp})'
            displayText: 'rrotate(int x, int disp)'
            type: 'function'
            leftLabel: 'int'
            description: 'Returns the number x rotated disp bits to the right.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-bit32.rrotate'
          },
          {
            snippet: 'rshift(${1:int|x}, ${2:int|disp})'
            displayText: 'rshift(int x, int disp)'
            type: 'function'
            leftLabel: 'int'
            description: 'Returns the number x shifted disp bits to the right.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-bit32.rshift'
          },
        ]

      else if match_exact("Book")
        suggestions = [
          {
            snippet: 'page_offset'
            displayText: 'page_offset'
            type: 'property'
            leftLabel: 'int'
            description: 'The page numbers displayed in the Custom PDF UI are offset by this amount.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/book/'
          },
          {
            snippet: 'clearHighlight()'
            displayText: 'clearHighlight()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Clears the current highlight.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/book/#clearhighlight'
          },
          {
            snippet: 'getPage(${1:bool|use_page_offset})'
            displayText: 'getPage(bool use_page_offset)'
            type: 'function'
            leftLabel: 'int'
            description: 'Gets the current page of the PDF.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/book/#getpage'
          },
          {
            snippet: 'setHighlight(${1:float|x1}, ${2:float|y1}, ${3:float|x2}, ${4:float|y2})'
            displayText: 'setHighlight(float x1, float y1, float x2, float y2)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Set highlight box on current page.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/book/#sethighlight'
          },
          {
            snippet: 'setPage(${1:int|page}, ${2:bool|use_page_offset})'
            displayText: 'setPage(int page, bool use_page_offset)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Set current page.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/book/#setpage'
          },
        ]

      else if match_exact("Browser")
        suggestions = [
          {
            snippet: 'url'
            displayText: 'url'
            type: 'property'
            leftLabel: 'string'
            description: 'URL which currently wants to display.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/browser/#url'
          },
          {
            snippet: 'pixel_width'
            displayText: 'pixel_width'
            type: 'property'
            leftLabel: 'int'
            description: 'The pixel width the browser is virtually rendering to.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/browser/#pixel_width'
          },
        ]

      else if match_exact("Clock")
        suggestions = [
          {
            snippet: 'paused'
            displayText: 'paused'
            type: 'property'
            leftLabel: 'bool'
            description: 'If the Clock\'s timer is paused. Setting this value will pause or resume the timer.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/clock/#paused'
          },
          {
            snippet: 'getValue()'
            displayText: 'getValue()'
            type: 'function'
            leftLabel: 'int'
            description: 'Returns the current value in stopwatch or timer mode as the number of seconds.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/clock/#getvalue'
          },
          {
            snippet: 'pauseStart()'
            displayText: 'pauseStart()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Toggle function for pausing and resuming a stopwatch or timer on the Clock.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/clock/#pausestart'
          },
          {
            snippet: 'setValue(${1:int|seconds})'
            displayText: 'setValue(int seconds)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Switches the clock to timer mode and sets the timer to the given value in seconds.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/clock/#setvalue'
          },
          {
            snippet: 'startStopwatch()'
            displayText: 'startStopwatch()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Switches the Clock to stopwatch mode and begins the stopwatch from 0.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/clock/#startstopwatch'
          },
          {
            snippet: 'showCurrentTime()'
            displayText: 'showCurrentTime()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Switches the Clock back to displaying the current time.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/clock/#showcurrenttime'
          },
        ]

      else if match_exact("Color")
        suggestions = [
          {
            snippet: 'Black'
            displayText: 'Black'
            type: 'constant'
            leftLabel: 'Color'
            description: 'The Color of the Black player.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/color/'
          },
          {
            snippet: 'Blue'
            displayText: 'Blue'
            type: 'constant'
            leftLabel: 'Color'
            description: 'The Color of the Blue player.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/color/'
          },
          {
            snippet: 'Brown'
            displayText: 'Brown'
            type: 'constant'
            leftLabel: 'Color'
            description: 'The Color of the Brown player.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/color/'
          },
          {
            snippet: 'Green'
            displayText: 'Green'
            type: 'constant'
            leftLabel: 'Color'
            description: 'The Color of the Green player.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/color/'
          },
          {
            snippet: 'Orange'
            displayText: 'Orange'
            type: 'constant'
            leftLabel: 'Color'
            description: 'The Color of the Orange player.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/color/'
          },
          {
            snippet: 'Pink'
            displayText: 'Pink'
            type: 'constant'
            leftLabel: 'Color'
            description: 'The Color of the Pink player.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/color/'
          },
          {
            snippet: 'Purple'
            displayText: 'Purple'
            type: 'constant'
            leftLabel: 'Color'
            description: 'The Color of the Purple player.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/color/'
          },
          {
            snippet: 'Red'
            displayText: 'Red'
            type: 'constant'
            leftLabel: 'Color'
            description: 'The Color of the Red player.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/color/'
          },
          {
            snippet: 'Teal'
            displayText: 'Teal'
            type: 'constant'
            leftLabel: 'Color'
            description: 'The Color of the Teal player.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/color/'
          },
          {
            snippet: 'White'
            displayText: 'White'
            type: 'constant'
            leftLabel: 'Color'
            description: 'The Color of the White player.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/color/'
          },
          {
            snippet: 'Yellow'
            displayText: 'Yellow'
            type: 'constant'
            leftLabel: 'Color'
            description: 'The Color of the Yellow player.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/color/'
          },
          {
            snippet: 'list'
            displayText: 'list'
            type: 'property'
            leftLabel: 'table'
            description: 'table of all named colors.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/color/#list'
          },
          {
            snippet: 'add(${1:string|name}, ${2:Color|color})'
            displayText: 'add(string name, Color color)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Add a color to the table of all named colors.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/color/#add'
          },
          {
            snippet: 'fromHex(${1:string|hex})'
            displayText: 'fromHex(string hex)'
            type: 'function'
            leftLabel: 'Color'
            description: 'Returns a new Color from a given hex string (#RRGGBBAA).  "#" and "AA" are optional.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/color/#fromhex'
          },
          {
            snippet: 'fromString(${1:string|player_color})'
            displayText: 'fromString(string player_color)'
            type: 'function'
            leftLabel: 'Color'
            description: 'Returns a new Color from a given player color string ("Red", "White", etc.).'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/color/#fromstring'
          },
          {
            snippet: 'new(${1:float|r}, ${2:float|g}, ${3:float|b}, ${4:float|a})'
            displayText: 'new(float r, float g, float b, float a)'
            type: 'function'
            leftLabel: 'Color'
            description: 'Returns a new Color.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/color/#new'
          },
        ]

      else if match_exact("Container")
        suggestions = [
          {
            snippet: 'search(${1:Player|player}, ${2:int|max_cards})'
            displayText: 'search(Player player, int max_cards)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Activate search window for player, optionally limited to top N cards'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/container/#search'
          },
        ]

      else if match_exact("coroutine")
        suggestions = [
          {
            snippet: 'create(${1:function|f})'
            displayText: 'create(function f)'
            type: 'function'
            leftLabel: 'thread'
            description: 'Creates a new coroutine, with body f.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-coroutine.create'
          },
          {
            snippet: 'resume(${1:coroutine|co})'
            displayText: 'resume(coroutine co)'
            type: 'function'
            leftLabel: 'table'
            description: 'Starts or continues the execution of coroutine co.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-coroutine.resume'
          },
          {
            snippet: 'running()'
            displayText: 'running()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns the running coroutine plus a bool, true when the running coroutine is the main one.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-coroutine.running'
          },
          {
            snippet: 'status(${1:coroutine|co})'
            displayText: 'status(coroutine co)'
            type: 'function'
            leftLabel: 'string'
            description: 'Returns the status of coroutine co, as a string.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-coroutine.status'
          },
          {
            snippet: 'wrap(${1:function|f})'
            displayText: 'wrap(function f)'
            type: 'function'
            leftLabel: 'table'
            description: 'Creates a new coroutine, with body f.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-coroutine.wrap'
          },
          {
            snippet: 'yield(${1:int|value})'
            displayText: 'yield(int value)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Suspends the execution of the calling coroutine.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-coroutine.yield'
          },
        ]

      else if match_exact("Counter")
        suggestions = [
          {
            snippet: 'clear()'
            displayText: 'clear()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Resets the Counter value back to 0.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/counter/#clear'
          },
          {
            snippet: 'decrement()'
            displayText: 'decrement()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Decrements the Counter\'s value by 1.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/counter/#decrement'
          },
          {
            snippet: 'getValue()'
            displayText: 'getValue()'
            type: 'function'
            leftLabel: 'int'
            description: 'Returns the current value of the Counter.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/counter/#getvalue'
          },
          {
            snippet: 'increment()'
            displayText: 'increment()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Increments the Counter\'s value by 1.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/counter/#increment'
          },
          {
            snippet: 'setValue(${1:int|seconds})'
            displayText: 'setValue(int seconds)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets the current value of the Counter.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/counter/#setvalue'
          },
        ]

      else if match_exact("dynamic")
        suggestions = [
          {
            snippet: 'eval(${1:string|s})'
            displayText: 'eval(string s)'
            type: 'function'
            leftLabel: 'any'
            description: 'Returns the evaluation of s.'
            descriptionMoreURL: 'http://www.moonsharp.org/additions.html'
          },
          {
            snippet: 'prepare(${1:string|s})'
            displayText: 'prepare(string s)'
            type: 'function'
            leftLabel: 'any'
            description: 'Returns a prepared expression object which can be passed to dynamic.eval for faster execution.'
            descriptionMoreURL: 'http://www.moonsharp.org/additions.html'
          },
        ]

      else if match_exact("Global")
        suggestions = [
          {
            snippet: 'script_code'
            displayText: 'script_code'
            type: 'property'
            leftLabel: 'string'
            description: 'Returns the Global Lua script.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#script_code'
          },
          {
            snippet: 'script_state'
            displayText: 'script_state'
            type: 'property'
            leftLabel: 'string'
            description: 'Returns the Global saved Lua script state.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#script_state'
          },
          {
            snippet: 'addDecal(${1:table|decal})'
            displayText: 'addDecal(table decal)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Add a Decal onto the game world.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#adddecal'
          },
          {
            snippet: 
              'addDecal({\n\t' +
              'name                      = ${1:-- string},\n\t' +
              'url                       = ${2:-- string},\n\t' +
              'position                  = ${3:-- Vector},\n\t' +
              'rotation                  = ${4:-- Vector},\n\t' +
              'scale                     = ${5:-- float}\n' +
              '})'
            displayText: 'addDecal({string name, string url, Vector position, Vector rotation, float scale})'
            type: 'function'
            leftLabel: 'bool'
            description: 'Add a Decal onto the game world.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#adddecal'
          },
          {
            snippet: 'call(${1:string|function_name}, ${2:table|parameters})'
            displayText: 'call(string function_name, table parameters)'
            type: 'function'
            leftLabel: 'any'
            description: 'Calls a Lua function owned by the Global Script and passes an optional table as parameters to the function.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#call'
          },
          {
            snippet: 'getDecals()'
            displayText: 'getDecals()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns a table of sub-tables, each sub-table representing one decal.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getdecals'
          },
          {
            snippet: 'getDecals()\n\t' +
              '-- returns {{\n\t' +
              '--    name                      string   (Name of decal)},\n\t' +
              '--    url                       string   (Filepath or URL of image)},\n\t' +
              '--    position                  Vector   (Position in world)},\n\t' +
              '--    rotation                  Vector   (Rotation in world)},\n\t' +
              '--    scale                     float    (1 is normal scale)}\n' +
              '\t-- }}'
            displayText: 'getDecals({{string name, string url, Vector position, Vector rotation, float scale}})'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns a table of sub-tables, each sub-table representing one decal.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getdecals'
          },
          {
            snippet: 'getTable(${1:string|table_name})'
            displayText: 'getTable(string table_name)'
            type: 'function'
            leftLabel: 'table'
            description: 'Gets a Lua table for this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#gettable'
          },
          {
            snippet: 'getVar(${1:string|variable_name})'
            displayText: 'getVar(string variable_name)'
            type: 'function'
            leftLabel: 'any'
            description: 'Gets a Lua variable for this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getvar'
          },
          {
            snippet: 'setDecals(${1:table|decals})'
            displayText: 'setDecals(table decals)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets which decals are on an object. This removes other decals already present; use an empty table to remove all decals.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#setdecals'
          },
          {
            snippet: 
              'setDecals({{\n\t' +
              'name                      = ${1:-- string},\n\t' +
              'url                       = ${2:-- string},\n\t' +
              'position                  = ${3:-- Vector},\n\t' +
              'rotation                  = ${4:-- Vector},\n\t' +
              'scale                     = ${5:-- float}\n' +
              '}})'
            displayText: 'setDecals({{string name, string url, Vector position, Vector rotation, float scale}})'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets which decals are on an object. This removes other decals already present; use an empty table to remove all decals.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#setdecals'
          },
          {
            snippet: 'setHideFaceDown(${1:bool|hide})'
            displayText: 'setHideFaceDown(bool hide)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets whether face-down objects (which have the relevant property set) will be hidden.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#sethidefacedown'
          },
          {
            snippet: 'setLookingForPlayers(${1:bool|looking_for_players})'
            displayText: 'setLookingForPlayers(bool looking_for_players)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets whether server will be listed as looking for players in server browser.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#setlookingforplayers'
          },
          {
            snippet: 'setTable(${1:string|table_name}, ${2:table|the_table})'
            displayText: 'setTable(string table_name, table the_table)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets a Lua table for this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#settable'
          },
          {
            snippet: 'setVar(${1:string|variable_name}, ${2:any|value})'
            displayText: 'setVar(string variable_name, any value)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets a Lua variable for this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#setvar'
          },
        ]

      else if match_exact("Grid")
        suggestions = [
          {
            snippet: 'type'
            displayText: 'type'
            type: 'property'
            leftLabel: 'int'
            description: 'The type of the grid. 1 = Rectangles, 2 = Horizontal hexes, 3 = Vertical hexes.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/grid/#type'
          },
          {
            snippet: 'show_lines'
            displayText: 'show_lines'
            type: 'property'
            leftLabel: 'bool'
            description: 'Visibility of the grid lines.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/grid/#show_lines'
          },
          {
            snippet: 'color'
            displayText: 'color'
            type: 'property'
            leftLabel: 'Color'
            description: 'Color of the grid lines.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/grid/#color'
          },
          {
            snippet: 'opacity'
            displayText: 'opacity'
            type: 'property'
            leftLabel: 'float'
            description: 'Opacity of the grid lines.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/grid/#opacity'
          },
          {
            snippet: 'thick_lines'
            displayText: 'thick_lines'
            type: 'property'
            leftLabel: 'bool'
            description: 'Thickness of the grid lines. false = Thin, true = Thick.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/grid/#thick_lines'
          },
          {
            snippet: 'snapping'
            displayText: 'snapping'
            type: 'property'
            leftLabel: 'int'
            description: 'Method of snapping objects to the grid. 1 = Off, 2 = Lines, 3 = Center, 4 = Both.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/grid/#snapping'
          },
          {
            snippet: 'offsetX'
            displayText: 'offsetX'
            type: 'property'
            leftLabel: 'float'
            description: 'X offset of the grid origin.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/grid/#offsetx'
          },
          {
            snippet: 'offsetY'
            displayText: 'offsetY'
            type: 'property'
            leftLabel: 'float'
            description: 'Y offset of the grid origin.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/grid/#offsety'
          },
          {
            snippet: 'sizeX'
            displayText: 'sizeX'
            type: 'property'
            leftLabel: 'float'
            description: 'Width of the grid cells.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/grid/#sizex'
          },
          {
            snippet: 'sizeY'
            displayText: 'sizeY'
            type: 'property'
            leftLabel: 'float'
            description: 'Height of the grid cells.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/grid/#sizey'
          },
        ]

      else if match_exact("Hands")
        suggestions = [
          {
            snippet: 'enable'
            displayText: 'enable'
            type: 'property'
            leftLabel: 'bool'
            description: 'Whether hand zones are enabled i.e. hold objects.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/hands/#enable'
          },
          {
            snippet: 'disable_unused'
            displayText: 'disable_unused'
            type: 'property'
            leftLabel: 'bool'
            description: 'Whether hands zones belonging to a color without a seated player should be disabled.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/hands/#disable_unused'
          },
          {
            snippet: 'hiding'
            displayText: 'hiding'
            type: 'property'
            leftLabel: 'int'
            description: 'Determines which hand contents are hidden from which players.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/hands/#hiding'
          },
          {
            snippet: 'getHands()'
            displayText: 'getHands()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns a table of all Hand Zone Objects in the game.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/hands/#gethands'
          },
        ]

      else if match_exact("Info")
        suggestions = [
          {
            snippet: 'complexity'
            displayText: 'complexity'
            type: 'property'
            leftLabel: 'string'
            description: 'The complexity of the current game/mod.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/info/#complexity'
          },
          {
            snippet: 'name'
            displayText: 'name'
            type: 'property'
            leftLabel: 'string'
            description: 'Name of the current game/mod.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/info/#name'
          },
          {
            snippet: 'number_of_players'
            displayText: 'number_of_players'
            type: 'property'
            leftLabel: 'table'
            description: 'The number of players the current game/mod allows.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/info/#number_of_players'
          },
          {
            snippet: 'playing_time'
            displayText: 'playing_time'
            type: 'property'
            leftLabel: 'table'
            description: 'The amount of time the current game/mod takes.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/info/#playing_time'
          },
          {
            snippet: 'tags'
            displayText: 'tags'
            type: 'property'
            leftLabel: 'table'
            description: 'The tags associated with the current game/mod.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/info/#tags'
          },
          {
            snippet: 'type'
            displayText: 'type'
            type: 'property'
            leftLabel: 'string'
            description: 'The category of the current mod.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/info/#type'
          },
        ]

      else if match_exact("JSON")
        suggestions = [
          {
            snippet: 'decode(${1:string|json_string})'
            displayText: 'decode(string json_string)'
            type: 'function'
            leftLabel: 'any'
            description: 'Decodes a valid JSON string into a Lua string, number, or table.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/json/#decode'
          },
          {
            snippet: 'encode(${1:any|variable})'
            displayText: 'encode(any variable)'
            type: 'function'
            leftLabel: 'string'
            description: 'Encodes a Lua string, number, or table into a valid JSON string. This will not work with Object references.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/json/#encode'
          },
          {
            snippet: 'encode_pretty(${1:any|variable})'
            displayText: 'encode_pretty(any variable)'
            type: 'function'
            leftLabel: 'string'
            description: 'Encodes a Lua string, number, or table into a valid JSON string formatted with indents (Human readable). This will not work with Object references.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/json/#encode_pretty'
          },
        ]

      else if match_exact("LayoutZone")
        suggestions = [
          {
            snippet: 'getOptions()'
            displayText: 'getOptions()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns the LayoutZone options.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/layoutzone/#getoptions'
          },
          {
            snippet: 'layout()'
            displayText: 'layout()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Lays out the zone.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/layoutzone/#layout'
          },
          {
            snippet: 'setOptions(${1:table|options})'
            displayText: 'setOptions(table options)'
            type: 'function'
            leftLabel: 'table'
            description: 'Sets the LayoutZone options.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/layoutzone/#setoptions'
          },
          {
            snippet: 
              'setOptions({{\n\t' +
              'direction                 = ${1:-- int},\n\t' +
              'meld_direction            = ${2:-- int},\n\t' +
              'new_object_facing         = ${3:-- int},\n\t' +
              'trigger_for_face_up       = ${4:-- bool},\n\t' +
              'trigger_for_face_down     = ${5:-- bool},\n\t' +
              'trigger_for_non_cards     = ${6:-- bool},\n\t' +
              'allow_swapping            = ${7:-- bool},\n\t' +
              'max_objects_per_new_group = ${8:-- int},\n\t' +
              'max_objects_per_group     = ${9:-- int},\n\t' +
              'meld_sort                 = ${10:-- int},\n\t' +
              'meld_reverse_sort         = ${11:-- bool},\n\t' +
              'meld_sort_existing        = ${12:-- bool},\n\t' +
              'sticky_cards              = ${13:-- bool},\n\t' +
              'horizontal_spread         = ${14:-- float},\n\t' +
              'vertical_spread           = ${15:-- float},\n\t' +
              'horizontal_group_padding  = ${16:-- float},\n\t' +
              'vertical_group_padding    = ${17:-- float},\n\t' +
              'split_added_decks         = ${18:-- bool},\n\t' +
              'combine_into_decks        = ${19:-- bool},\n\t' +
              'cards_per_deck            = ${20:-- int},\n\t' +
              'alternate_directions      = ${21:-- bool},\n\t' +
              'randomize                 = ${22:-- bool},\n\t' +
              'instant_refill            = ${23:-- bool},\n\t' +
              'manual_only               = ${24:-- bool}\n' +
              '}})'
            displayText: 'setOptions({{int direction, int meld_direction, int new_object_facing, bool trigger_for_face_up, bool trigger_for_face_down, bool trigger_for_non_cards, bool allow_swapping, int max_objects_per_new_group, int max_objects_per_group, int meld_sort, bool meld_reverse_sort, bool meld_sort_existing, bool sticky_cards, float horizontal_spread, float vertical_spread, float horizontal_group_padding, float vertical_group_padding, bool split_added_decks, bool combine_into_decks, int cards_per_deck, bool alternate_directions, bool randomize, bool instant_refill, bool manual_only}})'
            type: 'function'
            leftLabel: 'table'
            description: 'Sets the LayoutZone options.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/layoutzone/#setoptions'
          },
        ]

      else if match_exact("Lighting")
        suggestions = [
          {
            snippet: 'ambient_type'
            displayText: 'ambient_type'
            type: 'property'
            leftLabel: 'int'
            description: 'The source of the ambient light. 1 = Background, 2 = Gradient.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/lighting/#ambient_type'
          },
          {
            snippet: 'ambient_intensity'
            displayText: 'ambient_intensity'
            type: 'property'
            leftLabel: 'float'
            description: 'The strength of the ambient light either from the background or gradient. Range is 0-4.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/lighting/#ambient_intensity'
          },
          {
            snippet: 'light_intensity'
            displayText: 'light_intensity'
            type: 'property'
            leftLabel: 'float'
            description: 'The strength of the directional light shining down in the scene. Range is 0-4.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/lighting/#light_intensity'
          },
          {
            snippet: 'lut_contribution'
            displayText: 'lut_contribution'
            type: 'property'
            leftLabel: 'float'
            description: 'How much the LUT contributes to the light.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/lighting/#lut_contribution'
          },
          {
            snippet: 'lut_index'
            displayText: 'lut_index'
            type: 'property'
            leftLabel: 'int'
            description: 'The LUT index of the light.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/lighting/#lut_index'
          },
          {
            snippet: 'lut_url'
            displayText: 'lut_url'
            type: 'property'
            leftLabel: 'string'
            description: 'The LUT URL for the light.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/lighting/#lut_url'
          },
          {
            snippet: 'reflection_intensity'
            displayText: 'reflection_intensity'
            type: 'property'
            leftLabel: 'float'
            description: 'The strength of the reflections from the background. Range is 0-1.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/lighting/#reflection_intensity'
          },
          {
            snippet: 'apply()'
            displayText: 'apply()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Applies all changed made to the Lighting class. This must be called for these changes to take affect.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/lighting/#apply'
          },
          {
            snippet: 'getAmbientEquatorColor()'
            displayText: 'getAmbientEquatorColor()'
            type: 'function'
            leftLabel: 'Color'
            description: 'Returns the Color of the gradient equator.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/lighting/#getambientequatorcolor'
          },
          {
            snippet: 'getAmbientGroundColor()'
            displayText: 'getAmbientGroundColor()'
            type: 'function'
            leftLabel: 'Color'
            description: 'Returns the Color of the gradient ground.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/lighting/#getambientgroundcolor'
          },
          {
            snippet: 'getAmbientSkyColor()'
            displayText: 'getAmbientSkyColor()'
            type: 'function'
            leftLabel: 'Color'
            description: 'Returns the Color of the gradient sky.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/lighting/#getambientskycolor'
          },
          {
            snippet: 'getLightColor()'
            displayText: 'getLightColor()'
            type: 'function'
            leftLabel: 'Color'
            description: 'Returns the Color of the directional light.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/lighting/#getlightcolor'
          },
          {
            snippet: 'setAmbientEquatorColor(${1:Color|color})'
            displayText: 'setAmbientEquatorColor(Color color)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets the Color of the gradient equator.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/lighting/#setambientequatorcolor'
          },
          {
            snippet: 'setAmbientGroundColor(${1:Color|color})'
            displayText: 'setAmbientGroundColor(Color color)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets the Color of the ambient ground.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/lighting/#setambientgroundcolor'
          },
          {
            snippet: 'setAmbientSkyColor(${1:Color|color})'
            displayText: 'setAmbientSkyColor(Color color)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets the Color of the gradient sky.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/lighting/#setambientskycolor'
          },
          {
            snippet: 'setLightColor(${1:Color|color})'
            displayText: 'setLightColor(Color color)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets the Color of the directional light.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/lighting/#setlightcolor'
          },
        ]

      else if match_exact("math")
        suggestions = [
          {
            snippet: 'huge'
            displayText: 'huge'
            type: 'constant'
            leftLabel: 'float'
            description: 'The value HUGE_VAL, a value larger than or equal to any other numerical value.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-math.huge'
          },
          {
            snippet: 'pi'
            displayText: 'pi'
            type: 'constant'
            leftLabel: 'float'
            description: 'The value of p.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-math.pi'
          },
          {
            snippet: 'abs(${1:float|x})'
            displayText: 'abs(float x)'
            type: 'function'
            leftLabel: 'float'
            description: 'Returns the absolute value of x.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-math.abs'
          },
          {
            snippet: 'acos(${1:float|x})'
            displayText: 'acos(float x)'
            type: 'function'
            leftLabel: 'float'
            description: 'Returns the arc cosine of x (in radians).'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-math.acos'
          },
          {
            snippet: 'asin(${1:float|x})'
            displayText: 'asin(float x)'
            type: 'function'
            leftLabel: 'float'
            description: 'Returns the arc sine of x (in radians).'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-math.asin'
          },
          {
            snippet: 'atan(${1:float|x})'
            displayText: 'atan(float x)'
            type: 'function'
            leftLabel: 'float'
            description: 'Returns the arc tangent of x (in radians).'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-math.atan'
          },
          {
            snippet: 'atan2(${1:float|y}, ${2:float|x})'
            displayText: 'atan2(float y, float x)'
            type: 'function'
            leftLabel: 'float'
            description: 'Returns the arc tangent of y/x (in radians), but uses the signs of both parameters to find the quadrant of the result.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-math.atan2'
          },
          {
            snippet: 'ceil(${1:float|x})'
            displayText: 'ceil(float x)'
            type: 'function'
            leftLabel: 'int'
            description: 'Returns the smallest integer larger than or equal to x.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-math.ceil'
          },
          {
            snippet: 'cos(${1:float|x})'
            displayText: 'cos(float x)'
            type: 'function'
            leftLabel: 'float'
            description: 'Returns the cosine of x (assumed to be in radians).'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-math.cos'
          },
          {
            snippet: 'cosh(${1:float|x})'
            displayText: 'cosh(float x)'
            type: 'function'
            leftLabel: 'float'
            description: 'Returns the hyperbolic cosine of x.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-math.cosh'
          },
          {
            snippet: 'deg(${1:float|x})'
            displayText: 'deg(float x)'
            type: 'function'
            leftLabel: 'float'
            description: 'Returns the angle x (given in radians) in degrees.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-math.deg'
          },
          {
            snippet: 'exp(${1:float|x})'
            displayText: 'exp(float x)'
            type: 'function'
            leftLabel: 'float'
            description: 'Returns the value e^x.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-math.exp'
          },
          {
            snippet: 'floor(${1:float|x})'
            displayText: 'floor(float x)'
            type: 'function'
            leftLabel: 'int'
            description: 'Returns the largest integer smaller than or equal to x.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-math.floor'
          },
          {
            snippet: 'fmod(${1:float|x}, ${2:float|y})'
            displayText: 'fmod(float x, float y)'
            type: 'function'
            leftLabel: 'float'
            description: 'Returns the remainder of the division of x by y that rounds the quotient towards zero.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-math.fmod'
          },
          {
            snippet: 'frexp(${1:float|x})'
            displayText: 'frexp(float x)'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns m and e such that x = m2^e, e is an integer and the absolute value of m is in the range [0.5, 1) (or zero when x is zero).'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-math.frexp'
          },
          {
            snippet: 'ldexp(${1:float|m}, ${2:int|e})'
            displayText: 'ldexp(float m, int e)'
            type: 'function'
            leftLabel: 'float'
            description: 'Returns m2^e (e should be an integer).'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-math.ldexp'
          },
          {
            snippet: 'log(${1:float|x})'
            displayText: 'log(float x)'
            type: 'function'
            leftLabel: 'float'
            description: 'Returns the logarithm of x in the given base.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-math.log'
          },
          {
            snippet: 'max(${1:float|x}, ${2:any|...})'
            displayText: 'max(float x, any ...)'
            type: 'function'
            leftLabel: 'float'
            description: 'Returns the maximum value among its arguments.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-math.max'
          },
          {
            snippet: 'min(${1:float|x}, ${2:any|...})'
            displayText: 'min(float x, any ...)'
            type: 'function'
            leftLabel: 'float'
            description: 'Returns the minimum value among its arguments.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-math.min'
          },
          {
            snippet: 'modf(${1:float|x})'
            displayText: 'modf(float x)'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns two numbers, the integral part of x and the fractional part of x.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-math.modf'
          },
          {
            snippet: 'pow(${1:float|x}, ${2:float|y})'
            displayText: 'pow(float x, float y)'
            type: 'function'
            leftLabel: 'float'
            description: 'Returns x^y. (You can also use the expression x^y to compute this value.)'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-math.pow'
          },
          {
            snippet: 'rad(${1:float|x})'
            displayText: 'rad(float x)'
            type: 'function'
            leftLabel: 'float'
            description: 'Returns the angle x (given in degrees) in radians.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-math.rad'
          },
          {
            snippet: 'random()'
            displayText: 'random()'
            type: 'function'
            leftLabel: 'float'
            description: 'This function is an interface to the simple pseudo-random generator function rand provided by Standard C.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-math.random'
          },
          {
            snippet: 'randomseed(${1:int|x})'
            displayText: 'randomseed(int x)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets x as the "seed" for the pseudo-random generator: equal seeds produce equal sequences of numbers.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-math.randomseed'
          },
          {
            snippet: 'sin(${1:float|x})'
            displayText: 'sin(float x)'
            type: 'function'
            leftLabel: 'float'
            description: 'Returns the sine of x (assumed to be in radians).'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-math.sin'
          },
          {
            snippet: 'sinh(${1:float|x})'
            displayText: 'sinh(float x)'
            type: 'function'
            leftLabel: 'float'
            description: 'Returns the hyperbolic sine of x.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-math.sinh'
          },
          {
            snippet: 'sqrt(${1:float|x})'
            displayText: 'sqrt(float x)'
            type: 'function'
            leftLabel: 'float'
            description: 'Returns the square root of x. (You can also use the expression x^0.5 to compute this value.)'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-math.sqrt'
          },
          {
            snippet: 'tan(${1:float|x})'
            displayText: 'tan(float x)'
            type: 'function'
            leftLabel: 'float'
            description: 'Returns the tangent of x (assumed to be in radians).'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-math.tan'
          },
          {
            snippet: 'tanh(${1:float|x})'
            displayText: 'tanh(float x)'
            type: 'function'
            leftLabel: 'float'
            description: 'Returns the hyperbolic tangent of x.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-math.tanh'
          },
        ]

      else if match_exact("MusicPlayer")
        suggestions = [
          {
            snippet: 'repeat_track'
            displayText: 'repeat_track'
            type: 'property'
            leftLabel: 'bool'
            description: 'If the current audio clip should be repeated.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/musicplayer/#repeattrack'
          },
          {
            snippet: 'shuffle'
            displayText: 'shuffle'
            type: 'property'
            leftLabel: 'bool'
            description: 'If the playlist should be shuffled.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/musicplayer/#shuffle'
          },
          {
            snippet: 'playlistIndex'
            displayText: 'playlistIndex'
            type: 'property'
            leftLabel: 'int'
            description: 'Current index of the playlist, or -1 if nothing is playing.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/musicplayer/#playlistindex'
          },
          {
            snippet: 'loaded'
            displayText: 'loaded'
            type: 'property'
            leftLabel: 'bool'
            description: 'If the all the players have loaded the current audio clip.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/musicplayer/#loaded'
          },
          {
            snippet: 'player_status'
            displayText: 'player_status'
            type: 'property'
            leftLabel: 'string'
            description: 'Status of the music player, one of: "Stop", "Play", "Loading", "Ready".'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/musicplayer/#playerstatus'
          },
          {
            snippet: 'play()'
            displayText: 'play()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Plays currently loaded audioclip. Returns true if the music player is playing, otherwise returns false.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/musicplayer/#play'
          },
          {
            snippet: 'pause()'
            displayText: 'pause()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Pauses currently playing audioclip. Returns true if the music player is paused, otherwise returns false.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/musicplayer/#pause'
          },
          {
            snippet: 'skipForward()'
            displayText: 'skipForward()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Skips to the next audioclip in playlist if possible. Returns true if skip was successful, otherwise returns false.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/musicplayer/#skipforward'
          },
          {
            snippet: 'skipBackward()'
            displayText: 'skipBackward()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Skips to the previous audioclip in playlist if possible. Returns true if skip was successful, otherwise returns false.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/musicplayer/#skipbackward'
          },
          {
            snippet: 'getCurrentAudioClip()'
            displayText: 'getCurrentAudioClip()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns a table of URL and Title for the currently loaded audio clip.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/musicplayer/#getcurrentaudioclip'
          },
          {
            snippet: 'getCurrentAudioClip()\n\t' +
              '-- returns {\n\t' +
              '--    url                       string,\n\t' +
              '--    title                     string\n' +
              '\t-- }'
            displayText: 'getCurrentAudioClip({string url, string title})'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns a table of URL and Title for the currently loaded audio clip.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/musicplayer/#getcurrentaudioclip'
          },
          {
            snippet: 'setCurrentAudioClip(${1:table|clip})'
            displayText: 'setCurrentAudioClip(table clip)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets the audio clip to load.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/musicplayer/#setcurrentaudioclip'
          },
          {
            snippet: 
              'setCurrentAudioClip({\n\t' +
              'string                    = ${1:-- url},\n\t' +
              'string                    = ${2:-- title}\n' +
              '})'
            displayText: 'setCurrentAudioClip({url string, title string})'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets the audio clip to load.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/musicplayer/#setcurrentaudioclip'
          },
          {
            snippet: 'getPlaylist()'
            displayText: 'getPlaylist()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns a table of tables (URL and Title) for the current playlist.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/musicplayer/#getplaylist'
          },
          {
            snippet: 'getPlaylist()\n\t' +
              '-- returns {{\n\t' +
              '--    url                       string,\n\t' +
              '--    title                     string\n' +
              '\t-- }}'
            displayText: 'getPlaylist({{string url, string title}})'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns a table of tables (URL and Title) for the current playlist.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/musicplayer/#getplaylist'
          },
          {
            snippet: 'setPlaylist(${1:table|playlist})'
            displayText: 'setPlaylist(table playlist)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets the current playlist.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/musicplayer/#setplaylist'
          },
          {
            snippet: 
              'setPlaylist({{\n\t' +
              'string                    = ${1:-- url},\n\t' +
              'string                    = ${2:-- title}\n' +
              '}})'
            displayText: 'setPlaylist({{url string, title string}})'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets the current playlist.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/musicplayer/#setplaylist'
          },
        ]

      else if match_exact("Notes")
        suggestions = [
          {
            snippet: 'addNotebookTab(${1:table|tab})'
            displayText: 'addNotebookTab(table tab)'
            type: 'function'
            leftLabel: 'int'
            description: 'Adds a new Tab to the Notebook and returns the index of the newly added Tab.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#addnotebooktab'
          },
          {
            snippet: 
              'addNotebookTab({\n\t' +
              'title                     = ${1:-- string},\n\t' +
              'body                      = ${2:-- string   (BBcode is allowed)},\n\t' +
              'color                     = ${3:-- string   [Grey]}\n' +
              '})'
            displayText: 'addNotebookTab({string title, string body, string color})'
            type: 'function'
            leftLabel: 'int'
            description: 'Adds a new Tab to the Notebook and returns the index of the newly added Tab.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#addnotebooktab'
          },
          {
            snippet: 'editNotebookTab(${1:table|tab})'
            displayText: 'editNotebookTab(table tab)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Edits an existing Tab on the Notebook.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#editnotebooktab'
          },
          {
            snippet: 
              'editNotebookTab({\n\t' +
              'index                     = ${1:-- int},\n\t' +
              'title                     = ${2:-- string},\n\t' +
              'body                      = ${3:-- string   (BBcode is allowed)},\n\t' +
              'color                     = ${4:-- string   [Grey]}\n' +
              '})'
            displayText: 'editNotebookTab({int index, string title, string body, string color})'
            type: 'function'
            leftLabel: 'bool'
            description: 'Edits an existing Tab on the Notebook.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#editnotebooktab'
          },
          {
            snippet: 'getNotebookTabs()'
            displayText: 'getNotebookTabs()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns a table of tables of all of the Tabs in the Notebook.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#getnotebooktabs'
          },
          {
            snippet: 'getNotebookTabs()\n\t' +
              '-- returns {{\n\t' +
              '--    index                     int,\n\t' +
              '--    title                     string,\n\t' +
              '--    body                      string,\n\t' +
              '--    color                     string\n' +
              '\t-- }}'
            displayText: 'getNotebookTabs({{int index, string title, string body, string color}})'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns a table of tables of all of the Tabs in the Notebook.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#getnotebooktabs'
          },
          {
            snippet: 'getNotes()'
            displayText: 'getNotes()'
            type: 'function'
            leftLabel: 'string'
            description: 'Returns the current on-screen notes as a string.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#getnotes'
          },
          {
            snippet: 'removeNotebookTab(${1:int|index})'
            displayText: 'removeNotebookTab(int index)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Removes a Tab from the Notebook at a given index.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#removenotebooktab'
          },
          {
            snippet: 'setNotes(${1:string|notes})'
            displayText: 'setNotes(string notes)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets the current on-screen notes. BBCOde is allowed for styling.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#setnotes'
          },
        ]

      else if match_exact("os")
        suggestions = [
          {
            snippet: 'clock()'
            displayText: 'clock()'
            type: 'function'
            leftLabel: 'int'
            description: 'Returns an approximation of the amount in seconds of CPU time used by the program.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-os.clock'
          },
          {
            snippet: 'date()'
            displayText: 'date()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns a string or a table containing date and time.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-os.date'
          },
          {
            snippet: 'difftime(${1:time|t2}, ${2:time|t1})'
            displayText: 'difftime(time t2, time t1)'
            type: 'function'
            leftLabel: 'int'
            description: 'Returns the number of seconds from time t1 to time t2.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-os.difftime'
          },
          {
            snippet: 'time()'
            displayText: 'time()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns the current time when called without arguments, or a time representing the date and time specified by the given table.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-os.time'
          },
        ]

      else if match_exact("Player")
        suggestions = [
          {
            snippet: 'Action'
            displayText: 'Action'
            type: 'constant'
            leftLabel: 'class'
            description: 'Type of Action player is attempting.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onplayeraction-actions'
          },
          {
            snippet: 'Black'
            displayText: 'Black'
            type: 'constant'
            leftLabel: 'Player'
            description: 'The Black player.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/'
          },
          {
            snippet: 'Blue'
            displayText: 'Blue'
            type: 'constant'
            leftLabel: 'Player'
            description: 'The Blue player.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/'
          },
          {
            snippet: 'Brown'
            displayText: 'Brown'
            type: 'constant'
            leftLabel: 'Player'
            description: 'The Brown player.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/'
          },
          {
            snippet: 'Green'
            displayText: 'Green'
            type: 'constant'
            leftLabel: 'Player'
            description: 'The Green player.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/'
          },
          {
            snippet: 'Orange'
            displayText: 'Orange'
            type: 'constant'
            leftLabel: 'Player'
            description: 'The Orange player.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/'
          },
          {
            snippet: 'Pink'
            displayText: 'Pink'
            type: 'constant'
            leftLabel: 'Player'
            description: 'The Pink player.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/'
          },
          {
            snippet: 'Purple'
            displayText: 'Purple'
            type: 'constant'
            leftLabel: 'Player'
            description: 'The Purple player.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/'
          },
          {
            snippet: 'Red'
            displayText: 'Red'
            type: 'constant'
            leftLabel: 'Player'
            description: 'The Red player.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/'
          },
          {
            snippet: 'Teal'
            displayText: 'Teal'
            type: 'constant'
            leftLabel: 'Player'
            description: 'The Teal player.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/'
          },
          {
            snippet: 'White'
            displayText: 'White'
            type: 'constant'
            leftLabel: 'Player'
            description: 'The White player.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/'
          },
          {
            snippet: 'Yellow'
            displayText: 'Yellow'
            type: 'constant'
            leftLabel: 'Player'
            description: 'The Yellow player.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/'
          },
          {
            snippet: 'getAvailableColors()'
            displayText: 'getAvailableColors()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns valid seats colors at current table.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/manager/#getavailablecolors'
          },
          {
            snippet: 'getColors()'
            displayText: 'getColors()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns all possible seats colors.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/manager/#getavailablecolors'
          },
          {
            snippet: 'getPlayers()'
            displayText: 'getPlayers()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns a table of all Players.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/manager/#getplayers'
          },
          {
            snippet: 'getSpectators()'
            displayText: 'getSpectators()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns a table of spectator Players.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/manager/#getspectators'
          },
        ]

      else if match_exact("Physics")
        suggestions = [
          {
            snippet: 'play_area'
            displayText: 'play_area'
            type: 'property'
            leftLabel: 'float'
            description: 'The size of the play area (0.0 - 1.0).'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/physics/#play_area'
          },
          {
            snippet: 'getGravity()'
            displayText: 'getGravity()'
            type: 'function'
            leftLabel: 'Vector'
            description: 'Returns the gravity Vector.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/physics/#getgravity'
          },
          {
            snippet: 'setGravity(${1:Vector|vector})'
            displayText: 'setGravity(Vector vector)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets the gravity Vector.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/physics/#setgravity'
          },
        ]

      else if match_exact("RPGFigurine")
        suggestions = [
          {
            snippet: 'attack()'
            displayText: 'attack()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Plays a random attack animation.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/rpgfigurine/#attack'
          },
          {
            snippet: 'changeMode()'
            displayText: 'changeMode()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Changes the RPG Figurine\'s current mode.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/rpgfigurine/#changemode'
          },
          {
            snippet: 'die()'
            displayText: 'die()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Plays the death animation. Call die() again to reset the RPG Figurine.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/rpgfigurine/#die'
          },
          {
            snippet: 'onAttack(hit_objects)\n\t${0: -- body...}\nend'
            displayText: 'onAttack(table hit_objects)'
            type: 'function'
            leftLabel: 'bool'
            description: 'This function is called, if it exists in your script, when this RPGFigurine attacks another RPGFigurine.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/rpgfigurine/#onattack'
          },
          {
            snippet: 'onHit(attacker)\n\t${0: -- body...}\nend'
            displayText: 'onHit(Object attacker)'
            type: 'function'
            leftLabel: 'bool'
            description: 'This function is called, if it exists in your script, when this RPGFigurine is attacked by another RPGFigurine.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/rpgfigurine/#onhit'
          },
        ]

      else if match_exact("string")
        suggestions = [
          {
            snippet: 'byte(${1:string|s}, ${2:int|i}, ${3:int|j})'
            displayText: 'byte(string s, int i, int j)'
            type: 'function'
            leftLabel: 'int'
            description: 'Returns the internal numerical codes of the characters s[i], s[i+1], ..., s[j].'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-string.byte'
          },
          {
            snippet: 'char(${1:int|c})'
            displayText: 'char(int c)'
            type: 'function'
            leftLabel: 'string'
            description: 'Returns a string comprised of the integer char codes converted to chars and concatenated.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-string.char'
          },
          {
            snippet: 'dump(${1:function|f})'
            displayText: 'dump(function f)'
            type: 'function'
            leftLabel: 'string'
            description: 'Returns a string containing a binary representation of the given function.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-string.dump'
          },
          {
            snippet: 'find(${1:string|s}, ${2:string|pattern}, ${3:int|init}, ${4:bool|plain})'
            displayText: 'find(string s, string pattern, int init, bool plain)'
            type: 'function'
            leftLabel: 'int'
            description: 'Returns the start and end indices of pattern in string, or nil.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-string.find'
          },
          {
            snippet: 'format(${1:string|formatstring}, ${2:any|...})'
            displayText: 'format(string formatstring, any ...)'
            type: 'function'
            leftLabel: 'string'
            description: 'Returns a formatted version of its variable number of arguments following the description given in its first argument.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-string.format'
          },
          {
            snippet: 'gmatch(${1:string|s}, ${2:string|pattern})'
            displayText: 'gmatch(string s, string pattern)'
            type: 'function'
            leftLabel: 'function'
            description: 'Returns an iterator function that returns the next captures from pattern over the string s.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-string.gmatch'
          },
          {
            snippet: 'gsub(${1:string|s}, ${2:string|pattern}, ${3:string|repl}, ${4:int|n})'
            displayText: 'gsub(string s, string pattern, string repl, int n)'
            type: 'function'
            leftLabel: 'string'
            description: 'Returns a string from pattern matched to s replaced with repl for n occurences.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-string.gsub'
          },
          {
            snippet: 'len(${1:string|s})'
            displayText: 'len(string s)'
            type: 'function'
            leftLabel: 'int'
            description: 'Returns the length of the string.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-string.len'
          },
          {
            snippet: 'lower(${1:string|s})'
            displayText: 'lower(string s)'
            type: 'function'
            leftLabel: 'string'
            description: 'Returns the string converted to lower case.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-string.lower'
          },
          {
            snippet: 'match(${1:string|s}, ${2:string|pattern}, ${3:int|init})'
            displayText: 'match(string s, string pattern, int init)'
            type: 'function'
            leftLabel: 'captures'
            description: 'Returns the captures from pattern matched to s.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-string.match'
          },
          {
            snippet: 'rep(${1:string|s}, ${2:int|n}, ${3:string|sep})'
            displayText: 'rep(string s, int n, string sep)'
            type: 'function'
            leftLabel: 'captures'
            description: 'Returns a string that is the concatenation of n copies of the string s separated by the string sep.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-string.rep'
          },
          {
            snippet: 'reverse(${1:string|s})'
            displayText: 'reverse(string s)'
            type: 'function'
            leftLabel: 'string'
            description: 'Returns the reverse of string.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-string.reverse'
          },
          {
            snippet: 'sub(${1:string|s}, ${2:int|i}, ${3:int|j})'
            displayText: 'sub(string s, int i, int j)'
            type: 'function'
            leftLabel: 'string'
            description: 'Returns the substring of s that starts at i and continues until j.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-string.sub'
          },
          {
            snippet: 'unicode(${1:string|s}, ${2:int|i}, ${3:int|j})'
            displayText: 'unicode(string s, int i, int j)'
            type: 'function'
            leftLabel: 'int'
            description: 'Returns the unicode numerical codes of the characters s[i], s[i+1], ..., s[j].'
            descriptionMoreURL: 'http://www.moonsharp.org/additions.html'
          },
          {
            snippet: 'upper(${1:string|s})'
            displayText: 'upper(string s)'
            type: 'function'
            leftLabel: 'string'
            description: 'Returns the string converted to upper case.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-string.upper'
          },
        ]

      else if match_exact("table")
        suggestions = [
          {
            snippet: 'concat(${1:table|list}, ${2:string|sep}, ${3:int|i}, ${4:int|j})'
            displayText: 'concat(table list, string sep, int i, int j)'
            type: 'function'
            leftLabel: 'string'
            description: 'Returns a string of items i to j in list joined by sep.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-table.concat'
          },
          {
            snippet: 'insert(${1:table|list}, ${2:int|pos}, ${3:any|value})'
            displayText: 'insert(table list, int pos, any value)'
            type: 'function'
            leftLabel: 'any'
            description: 'Inserts element value at position pos in list.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-table.insert'
          },
          {
            snippet: 'pack(${1:any|...})'
            displayText: 'pack(any ...)'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns a new table with all parameters stored into keys 1, 2, etc. and with a field "n" with the total number of parameters.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-table.pack'
          },
          {
            snippet: 'remove(${1:table|list}, ${2:int|pos})'
            displayText: 'remove(table list, int pos)'
            type: 'function'
            leftLabel: 'any'
            description: 'Removes (and returns) item pos from list.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-table.remove'
          },
          {
            snippet: 'sort(${1:table|list}, ${2:function|comp})'
            displayText: 'sort(table list, function comp)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sorts list in place. Uses compare function comp if specified.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-table.sort'
          },
          {
            snippet: 'unpack(${1:table|list}, ${2:int|i}, ${3:int|j})'
            displayText: 'unpack(table list, int i, int j)'
            type: 'function'
            leftLabel: 'string'
            description: 'Returns elemeents i to j from list.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-table.unpack'
          },
        ]

      else if match_exact("Tables")
        suggestions = [
          {
            snippet: 'getCustomURL()'
            displayText: 'getCustomURL()'
            type: 'function'
            leftLabel: 'string'
            description: 'Returns the image URL of the current Custom Table, or nil if the current table is not a Custom Table.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/tables/#getcustomurl'
          },
          {
            snippet: 'getTable()'
            displayText: 'getTable()'
            type: 'function'
            leftLabel: 'string'
            description: 'Returns the current Table\'s name i.e. equivalent to getTableObject().name.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/tables/#gettable'
          },
          {
            snippet: 'getTableObject()'
            displayText: 'getTableObject()'
            type: 'function'
            leftLabel: 'Object'
            description: 'Returns the current Table object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/tables/#gettableobject'
          },
          {
            snippet: 'setCustomURL(${1:string|url})'
            displayText: 'setCustomURL(string url)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets the image URL for the current Custom Table. Has no effect if the current Table is not a Custom Table.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/tables/#setcustomurl'
          },
          {
            snippet: 'setTable(${1:string|name})'
            displayText: 'setTable(string name)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Replaces the current Table with the Table matching the specified name.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/tables/#settable'
          },
        ]

      else if match_exact("TextTool")
        suggestions = [
          {
            snippet: 'getFontColor()'
            displayText: 'getFontColor()'
            type: 'function'
            leftLabel: 'Color'
            description: 'Returns the current font color as a Lua table keyed as table["r"], table["g"], and table["b"].'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/texttool/#getfontcolor'
          },
          {
            snippet: 'getFontSize()'
            displayText: 'getFontSize()'
            type: 'function'
            leftLabel: 'int'
            description: 'Returns the current font size.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/texttool/#getfontsize'
          },
          {
            snippet: 'getValue()'
            displayText: 'getValue()'
            type: 'function'
            leftLabel: 'string'
            description: 'Returns the current text.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/texttool/#getvalue'
          },
          {
            snippet: 'setFontColor(${1:Color|color})'
            displayText: 'setFontColor(Color color)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets the current font color. The Lua table parameter should be keyed as table["r"], table["g"], and table["b"].'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/texttool/#setfontcolor'
          },
          {
            snippet: 'setFontSize(${1:int|font_size})'
            displayText: 'setFontSize(int font_size)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets the current font size.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/texttool/#setfontsize'
          },
          {
            snippet: 'setValue(${1:string|text})'
            displayText: 'setValue(string text)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets the current text.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/texttool/#setvalue'
          },
        ]

      else if match_exact("Time")
        suggestions = [
          {
            snippet: 'time'
            displayText: 'time'
            type: 'property'
            leftLabel: 'float'
            description: 'The current game time in seconds.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/time/#time'
          },
          {
            snippet: 'delta_time'
            displayText: 'delta_time'
            type: 'property'
            leftLabel: 'float'
            description: 'Time in seconds since the last frame.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/time/#deltatime'
          },
          {
            snippet: 'fixed_time'
            displayText: 'fixed_time'
            type: 'property'
            leftLabel: 'float'
            description: 'The game time of the last fixedUpdate.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/time/#fixedtime'
          },
          {
            snippet: 'fixed_delta_time'
            displayText: 'fixed_delta_time'
            type: 'property'
            leftLabel: 'float'
            description: 'Duration of fixed update in seconds.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/time/#fixeddeltatime'
          },
          {
            snippet: 'frame_count'
            displayText: 'frame_count'
            type: 'property'
            leftLabel: 'int'
            description: 'Total number of frames since the scene began.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/time/#framecount'
          },
        ]

      else if match_exact("Turns")
        suggestions = [
          {
            snippet: 'enable'
            displayText: 'enable'
            type: 'property'
            leftLabel: 'bool'
            description: 'Enable/disable the turns system.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/turns/#member-variables'
          },
          {
            snippet: 'type'
            displayText: 'type'
            type: 'property'
            leftLabel: 'int'
            description: 'If the turn order is automatic or custom. 1=auto, 2=custom.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/turns/#member-variables'
          },
          {
            snippet: 'order'
            displayText: 'order'
            type: 'property'
            leftLabel: 'table'
            description: 'A table of strings, representing the player turn order.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/turns/#member-variables'
          },
          {
            snippet: 'reverse_order'
            displayText: 'reverse_order'
            type: 'property'
            leftLabel: 'bool'
            description: 'Enable/disable reversing turn rotation direction.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/turns/#member-variables'
          },
          {
            snippet: 'skip_empty_hands'
            displayText: 'skip_empty_hands'
            type: 'property'
            leftLabel: 'bool'
            description: 'Enable/disable skipping empty hands.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/turns/#member-variables'
          },
          {
            snippet: 'disable_interactations'
            displayText: 'disable_interactations'
            type: 'property'
            leftLabel: 'bool'
            description: 'Enable/disable the blocking of players ability to interact with Objects when it is not their turn.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/turns/#member-variables'
          },
          {
            snippet: 'pass_turns'
            displayText: 'pass_turns'
            type: 'property'
            leftLabel: 'bool'
            description: 'Enable/disable a player\'s ability to pass their turn to another.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/turns/#member-variables'
          },
          {
            snippet: 'turn_color'
            displayText: 'turn_color'
            type: 'property'
            leftLabel: 'string'
            description: 'The color of the Player who\'s turn it is.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/turns/#member-variables'
          },
          {
            snippet: 'getNextTurnColor()'
            displayText: 'getNextTurnColor()'
            type: 'function'
            leftLabel: 'string'
            description: 'Returns the Player Color string of the next player in the turn order.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/turns/#functions'
          },
          {
            snippet: 'getPreviousTurnColor()'
            displayText: 'getPreviousTurnColor()'
            type: 'function'
            leftLabel: 'string'
            description: 'Returns the Player Color string of the previous player in the turn order.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/turns/#functions'
          },
        ]

      else if match_exact("UI")
        suggestions = [
          {
            snippet: 'loading'
            displayText: 'loading'
            type: 'property'
            leftLabel: 'bool'
            description: 'Is true if the UI is still loading on this object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/ui/#member-variables'
          },
          {
            snippet: 'getAttribute(${1:string|id}, ${2:string|attribute})'
            displayText: 'getAttribute(string id, string attribute)'
            type: 'function'
            leftLabel: 'any'
            description: 'Obtains the value of a specified attribute of a UI element. Returns typically a string or number.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/ui/#getattribute'
          },
          {
            snippet: 'getAttributes(${1:string|id})'
            displayText: 'getAttributes(string id)'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns the attributes and their values of a UI element that have been set by the user.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/ui/#getattributes'
          },
          {
            snippet: 'getValue(${1:string|id})'
            displayText: 'getValue(string id)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Gets the value of a UI element.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/ui/#getvalue'
          },
          {
            snippet: 'hide(${1:string|id})'
            displayText: 'hide(string id)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Hides the given UI element.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/ui/#hide'
          },
          {
            snippet: 'setAttribute(${1:string|id}, ${2:string|attribute}, ${3:any|value})'
            displayText: 'setAttribute(string id, string attribute, any value)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets the value of a specified attribute of a UI element.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/ui/#setattribute'
          },
          {
            snippet: 'setAttributes(${1:string|id}, ${2:table|data})'
            displayText: 'setAttributes(string id, table data)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Updates the value of the supplied attributes of a UI element.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/ui/#setattributes'
          },
          {
            snippet: 'setValue(${1:string|id}, ${2:string|value})'
            displayText: 'setValue(string id, string value)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Updates the value of a UI element.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/ui/#setvalue'
          },
          {
            snippet: 'show(${1:string|id})'
            displayText: 'show(string id)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Shows the given UI element.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/ui/#show'
          },
          {
            snippet: 'setXml(${1:string|xml}, ${2:table|assets})'
            displayText: 'setXml(string xml, table assets)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Replaces the run-time UI with the XML string.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/ui/#setxml'
          },
          {
            snippet: 'setXmlTable(${1:table|xmltable}, ${2:table|assets})'
            displayText: 'setXmlTable(table xmltable, table assets)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Replaces the run-time UI with an XML string which is generated from a table of data.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/ui/#setxmltable'
          },
          {
            snippet: 'setCustomAssets(${1:table|assets})'
            displayText: 'setCustomAssets(table assets)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets the UI ASSETS (like custom images) for global or an Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/ui/#setcustomassets'
          },
          {
            snippet: 'getXml()'
            displayText: 'getXml()'
            type: 'function'
            leftLabel: 'string'
            description: 'Returns the run-time UI\'s XML in string format.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/ui/#getxml'
          },
          {
            snippet: 'getXmlTable()'
            displayText: 'getXmlTable()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns the run-time UI\'s XML formatted as a Lua table.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/ui/#getxmltable'
          },
          {
            snippet: 'getCustomAssets()'
            displayText: 'getCustomAssets()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns information on all custom assets uploaded to the UI ASSETS pane.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/ui/#getcustomassets'
          },
        ]

      else if match_exact("Vector")
        suggestions = [
          {
            snippet: 'new(${1:float|x}, ${2:float|y}, ${3:float|z})'
            displayText: 'new(float x, float y, float z)'
            type: 'function'
            leftLabel: 'Vector'
            description: 'Returns a new Vector.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/vector/#new'
          },
          {
            snippet: 'max(${1:Vector|v1}, ${2:Vector|v2})'
            displayText: 'max(Vector v1, Vector v2)'
            type: 'function'
            leftLabel: 'Vector'
            description: 'Returns a new Vector with the max component of each parameter.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/vector/#max'
          },
          {
            snippet: 'min(${1:Vector|v1}, ${2:Vector|v2})'
            displayText: 'min(Vector v1, Vector v2)'
            type: 'function'
            leftLabel: 'Vector'
            description: 'Returns a new Vector with the min component of each parameter.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/vector/#min'
          },
          {
            snippet: 'between(${1:Vector|v1}, ${2:Vector|v2})'
            displayText: 'between(Vector v1, Vector v2)'
            type: 'function'
            leftLabel: 'Vector'
            description: 'Returns a new Vector pointing from v1 to v2.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/vector/#between'
          },
        ]

      else if match_exact("Wait")
        suggestions = [
          {
            snippet: 'condition(${1:function|func}, ${2:function|condition}, ${3:float|timeout}, ${4:function|timeout_func})'
            displayText: 'condition(function func, function condition, float timeout, function timeout_func)'
            type: 'function'
            leftLabel: 'int'
            description: 'Activates a function when a given function returns true or activates a different function if a timeout occurs.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#condition'
          },
          {
            snippet: 'frames(${1:function|func}, ${2:int|frame_count})'
            displayText: 'frames(function func, int frame_count)'
            type: 'function'
            leftLabel: 'int'
            description: 'Activates a function after a set number of frames.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#frames'
          },
          {
            snippet: 'stop(${1:int|id})'
            displayText: 'stop(int id)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Stops a currently running Wait function.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#stop'
          },
          {
            snippet: 'time(${1:function|func}, ${2:float|time}, ${3:int|repetitions})'
            displayText: 'time(function func, float time, int repetitions)'
            type: 'function'
            leftLabel: 'int'
            description: 'Activates a function after a set amount of time has passed, repeats given amount of times.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#time'
          },
        ]

      else if match_exact("WebRequest")
        suggestions = [
          {
            snippet: 'custom(${1:string|url}, ${2:string|method}, ${3:bool|download}, ${4:string|data}, ${5:table|headers}, ${6:function|callback_function})'
            displayText: 'custom(string url, string method, bool download, string data, table headers, function callback_function)'
            type: 'function'
            leftLabel: 'WebRequest'
            description: 'Performs a HTTP request using the specified method, data and headers.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/webrequest/manager/#custom'
          },
          {
            snippet: 'custom(${1:string|url}, ${2:string|method}, ${3:bool|download}, ${4:string|data}, ${5:table|headers}, ${6:function|callback_function})\n\t' +
              '-- returns {\n\t' +
              '--    download_progress         bool     (0.0 - 1.0)},\n\t' +
              '--    error                     string,\n\t' +
              '--    is_error                  bool,\n\t' +
              '--    is_done                   bool,\n\t' +
              '--    text                      string,\n\t' +
              '--    upload_progress           bool     (0.0 - 1.0)},\n\t' +
              '--    url                       string\n' +
              '\t-- }'
            displayText: 'custom(string url, string method, bool download, string data, table headers, function callback_function, {bool download_progress, string error, bool is_error, bool is_done, string text, bool upload_progress, string url})'
            type: 'function'
            leftLabel: 'WebRequest'
            description: 'Performs a HTTP request using the specified method, data and headers.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/webrequest/manager/#custom'
          },
          {
            snippet: 'delete(${1:string|url}, ${2:function|callback_function})'
            displayText: 'delete(string url, function callback_function)'
            type: 'function'
            leftLabel: 'WebRequest'
            description: 'Performs a HTTP DELETE request.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/webrequest/manager/#delete'
          },
          {
            snippet: 'delete(${1:string|url}, ${2:function|callback_function})\n\t' +
              '-- returns {\n\t' +
              '--    download_progress         bool     (0.0 - 1.0)},\n\t' +
              '--    error                     string,\n\t' +
              '--    is_error                  bool,\n\t' +
              '--    is_done                   bool,\n\t' +
              '--    text                      string,\n\t' +
              '--    upload_progress           bool     (0.0 - 1.0)},\n\t' +
              '--    url                       string\n' +
              '\t-- }'
            displayText: 'delete(string url, function callback_function, {bool download_progress, string error, bool is_error, bool is_done, string text, bool upload_progress, string url})'
            type: 'function'
            leftLabel: 'WebRequest'
            description: 'Performs a HTTP DELETE request.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/webrequest/manager/#delete'
          },
          {
            snippet: 'get(${1:string|url}, ${2:function|callback_function})'
            displayText: 'get(string url, function callback_function)'
            type: 'function'
            leftLabel: 'WebRequest'
            description: 'Get data in text from the url. Callback function is supplied the WebRequest.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/webrequest/manager/#get'
          },
          {
            snippet: 'get(${1:string|url}, ${2:function|callback_function})\n\t' +
              '-- returns {\n\t' +
              '--    download_progress         bool     (0.0 - 1.0)},\n\t' +
              '--    error                     string,\n\t' +
              '--    is_error                  bool,\n\t' +
              '--    is_done                   bool,\n\t' +
              '--    text                      string,\n\t' +
              '--    upload_progress           bool     (0.0 - 1.0)},\n\t' +
              '--    url                       string\n' +
              '\t-- }'
            displayText: 'get(string url, function callback_function, {bool download_progress, string error, bool is_error, bool is_done, string text, bool upload_progress, string url})'
            type: 'function'
            leftLabel: 'WebRequest'
            description: 'Get data in text from the url. Callback function is supplied the WebRequest.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/webrequest/manager/#get'
          },
          {
            snippet: 'head(${1:string|url}, ${2:function|callback_function})'
            displayText: 'head(string url, function callback_function)'
            type: 'function'
            leftLabel: 'WebRequest'
            description: 'Performs a HTTP HEAD request.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/webrequest/manager/#head'
          },
          {
            snippet: 'head(${1:string|url}, ${2:function|callback_function})\n\t' +
              '-- returns {\n\t' +
              '--    download_progress         bool     (0.0 - 1.0)},\n\t' +
              '--    error                     string,\n\t' +
              '--    is_error                  bool,\n\t' +
              '--    is_done                   bool,\n\t' +
              '--    text                      string,\n\t' +
              '--    upload_progress           bool     (0.0 - 1.0)},\n\t' +
              '--    url                       string\n' +
              '\t-- }'
            displayText: 'head(string url, function callback_function, {bool download_progress, string error, bool is_error, bool is_done, string text, bool upload_progress, string url})'
            type: 'function'
            leftLabel: 'WebRequest'
            description: 'Performs a HTTP HEAD request.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/webrequest/manager/#head'
          },
          {
            snippet: 'post(${1:string|url}, ${2:table|form}, ${3:function|callback_function})'
            displayText: 'post(string url, table form, function callback_function)'
            type: 'function'
            leftLabel: 'WebRequest'
            description: 'Post the form to the url. Callback function is supplied the WebRequest.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/webrequest/manager/#post'
          },
          {
            snippet: 'post(${1:string|url}, ${2:table|form}, ${3:function|callback_function})\n\t' +
              '-- returns {\n\t' +
              '--    download_progress         bool     (0.0 - 1.0)},\n\t' +
              '--    error                     string,\n\t' +
              '--    is_error                  bool,\n\t' +
              '--    is_done                   bool,\n\t' +
              '--    text                      string,\n\t' +
              '--    upload_progress           bool     (0.0 - 1.0)},\n\t' +
              '--    url                       string\n' +
              '\t-- }'
            displayText: 'post(string url, table form, function callback_function, {bool download_progress, string error, bool is_error, bool is_done, string text, bool upload_progress, string url})'
            type: 'function'
            leftLabel: 'WebRequest'
            description: 'Post the form to the url. Callback function is supplied the WebRequest.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/webrequest/manager/#post'
          },
          {
            snippet: 'put(${1:string|url}, ${2:string|data}, ${3:function|callback_function})'
            displayText: 'put(string url, string data, function callback_function)'
            type: 'function'
            leftLabel: 'WebRequest'
            description: 'Put the data to the url. Callback function is supplied the WebRequest.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/webrequest/manager/#put'
          },
          {
            snippet: 'put(${1:string|url}, ${2:string|data}, ${3:function|callback_function})\n\t' +
              '-- returns {\n\t' +
              '--    download_progress         bool     (0.0 - 1.0)},\n\t' +
              '--    error                     string,\n\t' +
              '--    is_error                  bool,\n\t' +
              '--    is_done                   bool,\n\t' +
              '--    text                      string,\n\t' +
              '--    upload_progress           bool     (0.0 - 1.0)},\n\t' +
              '--    url                       string\n' +
              '\t-- }'
            displayText: 'put(string url, string data, function callback_function, {bool download_progress, string error, bool is_error, bool is_done, string text, bool upload_progress, string url})'
            type: 'function'
            leftLabel: 'WebRequest'
            description: 'Put the data to the url. Callback function is supplied the WebRequest.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/webrequest/manager/#put'
          },
        ]

      else if match_exact("Zone") # Zone Behaviour (has all Zone members)
        suggestions = [
          {
            snippet: 'getOptions()'
            displayText: 'getOptions()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns the LayoutZone options.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/layoutzone/#getoptions'
          },
          {
            snippet: 'layout()'
            displayText: 'layout()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Lays out the zone.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/layoutzone/#layout'
          },
          {
            snippet: 'setOptions(${1:table|options})'
            displayText: 'setOptions(table options)'
            type: 'function'
            leftLabel: 'table'
            description: 'Sets the LayoutZone options.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/layoutzone/#setoptions'
          },
          {
            snippet: 
              'setOptions({{\n\t' +
              'direction                 = ${1:-- int},\n\t' +
              'meld_direction            = ${2:-- int},\n\t' +
              'new_object_facing         = ${3:-- int},\n\t' +
              'trigger_for_face_up       = ${4:-- bool},\n\t' +
              'trigger_for_face_down     = ${5:-- bool},\n\t' +
              'trigger_for_non_cards     = ${6:-- bool},\n\t' +
              'allow_swapping            = ${7:-- bool},\n\t' +
              'max_objects_per_new_group = ${8:-- int},\n\t' +
              'max_objects_per_group     = ${9:-- int},\n\t' +
              'meld_sort                 = ${10:-- int},\n\t' +
              'meld_reverse_sort         = ${11:-- bool},\n\t' +
              'meld_sort_existing        = ${12:-- bool},\n\t' +
              'sticky_cards              = ${13:-- bool},\n\t' +
              'horizontal_spread         = ${14:-- float},\n\t' +
              'vertical_spread           = ${15:-- float},\n\t' +
              'horizontal_group_padding  = ${16:-- float},\n\t' +
              'vertical_group_padding    = ${17:-- float},\n\t' +
              'split_added_decks         = ${18:-- bool},\n\t' +
              'combine_into_decks        = ${19:-- bool},\n\t' +
              'cards_per_deck            = ${20:-- int},\n\t' +
              'alternate_directions      = ${21:-- bool},\n\t' +
              'randomize                 = ${22:-- bool},\n\t' +
              'instant_refill            = ${23:-- bool},\n\t' +
              'manual_only               = ${24:-- bool}\n' +
              '}})'
            displayText: 'setOptions({{int direction, int meld_direction, int new_object_facing, bool trigger_for_face_up, bool trigger_for_face_down, bool trigger_for_non_cards, bool allow_swapping, int max_objects_per_new_group, int max_objects_per_group, int meld_sort, bool meld_reverse_sort, bool meld_sort_existing, bool sticky_cards, float horizontal_spread, float vertical_spread, float horizontal_group_padding, float vertical_group_padding, bool split_added_decks, bool combine_into_decks, int cards_per_deck, bool alternate_directions, bool randomize, bool instant_refill, bool manual_only}})'
            type: 'function'
            leftLabel: 'table'
            description: 'Sets the LayoutZone options.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/layoutzone/#setoptions'
          },
        ]

      # PlayerInstance
      else if ((prefix == "." || scopeDescriptor.scopes[1] == "variable.other.lua") && previous_token_2 == "Player") ||  previous_token.substring(0, 7) == "Player["
        suggestions = [
          {
            snippet: 'admin'
            displayText: 'admin'
            type: 'property'
            leftLabel: 'bool'
            description: 'Is the player currently promoted or hosting the game? Read only.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#admin'
          },
          {
            snippet: 'blindfolded'
            displayText: 'blindfolded'
            type: 'property'
            leftLabel: 'bool'
            description: 'Is the player blindfolded?'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#blindfolded'
          },
          {
            snippet: 'color'
            displayText: 'color'
            type: 'property'
            leftLabel: 'string'
            description: 'The player\'s color. Read only.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#color'
          },
          {
            snippet: 'host'
            displayText: 'host'
            type: 'property'
            leftLabel: 'bool'
            description: 'Is the player the host?.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#host'
          },
          {
            snippet: 'lift_height'
            displayText: 'lift_height'
            type: 'property'
            leftLabel: 'float'
            description: 'The player\'s lift height from 0 to 1.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#lift_height'
          },
          {
            snippet: 'promoted'
            displayText: 'promoted'
            type: 'property'
            leftLabel: 'bool'
            description: 'Is the player currently promoted? Read only.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#promoted'
          },
          {
            snippet: 'seated'
            displayText: 'seated'
            type: 'property'
            leftLabel: 'float'
            description: 'Is the player currently seated at the table? Read only.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#seated'
          },
          {
            snippet: 'steam_id'
            displayText: 'steam_id'
            type: 'property'
            leftLabel: 'float'
            description: 'The player\'s Steam ID. Read only.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#steam_id'
          },
          {
            snippet: 'steam_name'
            displayText: 'steam_name'
            type: 'property'
            leftLabel: 'string'
            description: 'The player\'s Steam name. Read only.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#steam_name'
          },
          {
            snippet: 'team'
            displayText: 'team'
            type: 'property'
            leftLabel: 'string'
            description: 'The player\'s team. Team names: "None", "Clubs", "Diamonds", "Hearts", "Spades". Read only.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#team'
          },
          {
            snippet: 'attachCameraToObject(${1:table|attachment})'
            displayText: 'attachCameraToObject(table attachment)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Makes a player\'s camera follow an Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#attachcameratoobject'
          },
          {
            snippet: 
              'attachCameraToObject({\n\t' +
              'Object                    = ${1:-- object},\n\t' +
              'Vector                    = ${2:-- offset   [x=0, y=0, z=0]}\n' +
              '})'
            displayText: 'attachCameraToObject({object Object, offset Vector})'
            type: 'function'
            leftLabel: 'bool'
            description: 'Makes a player\'s camera follow an Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#attachcameratoobject'
          },
          {
            snippet: 'broadcast(${1:string|message})'
            displayText: 'broadcast(string message)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Broadcasts a message to the player. This also sends a message to the top center of the screen.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#broadcast'
          },
          {
            snippet: 'broadcast(${1:string|message}, ${2:string|color})'
            displayText: 'broadcast(string message, string color)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Broadcasts a message to the player with Color. This also sends a message to the top center of the screen.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#broadcast'
          },
          {
            snippet: 'changeColor(${1:string|new_color})'
            displayText: 'changeColor(string new_color)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Changes the player\'s color.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#changecolor'
          },
          {
            snippet: 'clearSelectedObjects()'
            displayText: 'clearSelectedObjects()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Clears the player\'s selection.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#clearselectedobjects'
          },
          {
            snippet: 'copy(${1:table|objects})'
            displayText: 'copy(table objects)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Triggers the player\'s Copy action for the specified objects'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#copy'
          },
          {
            snippet: 'getHandCount()'
            displayText: 'getHandCount()'
            type: 'function'
            leftLabel: 'int'
            description: 'Returns the number of hands that exist for this player color.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#gethandcount'
          },
          {
            snippet: 'getHandObjects(${1:int|index})'
            displayText: 'getHandObjects(int index)'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns a list of all the Cards and Mahjong Tiles in the player\'s hand. Specify index for additional hands.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#gethandobjects'
          },
          {
            snippet: 'getHandTransform(${1:int|hand_index})'
            displayText: 'getHandTransform(int hand_index)'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns the Transform of the player\'s hand.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#gethandtransform'
          },
          {
            snippet: 'getHandTransform(${1:int|hand_index})\n\t' +
              '-- returns {\n\t' +
              '--    position                  Vector   (World position)},\n\t' +
              '--    rotation                  Vector   (World rotation)},\n\t' +
              '--    scale                     Vector   (Local scale)},\n\t' +
              '--    forward                   Vector   (Forward direction)},\n\t' +
              '--    right                     Vector   (Right direction)},\n\t' +
              '--    up                        Vector   (Up direction)}\n' +
              '\t-- }'
            displayText: 'getHandTransform(int hand_index, {Vector position, Vector rotation, Vector scale, Vector forward, Vector right, Vector up})'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns the Transform of the player\'s hand.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#gethandtransform'
          },
          {
            snippet: 'getPointerPosition()'
            displayText: 'getPointerPosition()'
            type: 'function'
            leftLabel: 'Vector'
            description: 'Returns the position of the given player color\'s pointer.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#getpointerposition'
          },
          {
            snippet: 'getPointerRotation()'
            displayText: 'getPointerRotation()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns the y-axis rotation of the given player color\'s pointer in degrees.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#getpointerrotation'
          },
          {
            snippet: 'getHoldingObjects()'
            displayText: 'getHoldingObjects()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns a Lua table representing a list of all the Objects currently held by the player.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#getholdingobjects'
          },
          {
            snippet: 'getHoverObject()'
            displayText: 'getHoverObject()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns the object that this player is hovering their pointer over.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#gethoverobject'
          },
          {
            snippet: 'getSelectedObjects()'
            displayText: 'getSelectedObjects()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns a Lua table representing a list of all the Objects currently selected by the player.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#getpointerrotation'
          },
          {
            snippet: 'kick()'
            displayText: 'kick()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Kicks the player from the game.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#kick'
          },
          {
            snippet: 'lookAt(${1:table|parameters})'
            displayText: 'lookAt(table parameters)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Moves the Player\'s camera to look at a specific point.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#lookat'
          },
          {
            snippet: 
              'lookAt({\n\t' +
              'position                  = ${1:-- Vector   (required)},\n\t' +
              'pitch                     = ${2:-- float},\n\t' +
              'yaw                       = ${3:-- float},\n\t' +
              'distance                  = ${4:-- float}\n' +
              '})'
            displayText: 'lookAt({Vector position, float pitch, float yaw, float distance})'
            type: 'function'
            leftLabel: 'bool'
            description: 'Moves the Player\'s camera to look at a specific point.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#lookat'
          },
          {
            snippet: 'mute()'
            displayText: 'mute()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Mutes or unmutes the player.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#mute'
          },
          {
            snippet: 'paste(${1:Vector|position})'
            displayText: 'paste(Vector position)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Triggers the player\'s Paste action at the specified position'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#paste'
          },
          {
            snippet: 'pingTable(${1:Vector|position})'
            displayText: 'pingTable(Vector position)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Emulates the player using the ping tool at the given position.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#pingtable'
          },
          {
            snippet: 'print(${1:string|message})'
            displayText: 'print(string message)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Prints a message to the player.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#print'
          },
          {
            snippet: 'print(${1:string|message}, ${2:string|color})'
            displayText: 'print(string message, string color)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Prints a message to the player with Color.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#print'
          },
          {
            snippet: 'promote()'
            displayText: 'promote()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Promotes or demotes the player.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#promote'
          },
          {
            snippet: 'setHandTransform(${1:table|transform}, ${2:int|hand_index})'
            displayText: 'setHandTransform(table transform, int hand_index)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets the Transform of the player\'s hand.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#sethandtransform'
          },
          {
            snippet: 
              'setHandTransform({\n\t' +
              'position                  = ${1:-- Vector},\n\t' +
              'rotation                  = ${2:-- Vector},\n\t' +
              'scale                     = ${3:-- Vector},\n\t' +
              'forward                   = ${4:-- Vector},\n\t' +
              'right                     = ${5:-- Vector},\n\t' +
              'up                        = ${6:-- Vector}\n' +
              '}, ${8:int|hand_index})'
            displayText: 'setHandTransform({Vector position, Vector rotation, Vector scale, Vector forward, Vector right, Vector up}, int hand_index)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets the Transform of the player\'s hand.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#sethandtransform'
          },
          {
            snippet: 'setUITheme(${1:string|theme})'
            displayText: 'setUITheme(string theme)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets the player\'s UI theme (use "Export" in theme editor to get string).'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#setuitheme'
          },
          {
            snippet: 'showHotkeyConfig()'
            displayText: 'showHotkeyConfig()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Displays the hotkey assignment UI.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#showhotkeyconfig'
          },
          {
            snippet: 'showInfoDialog(${1:string|info})'
            displayText: 'showInfoDialog(string info)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Displays text to the player.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#showinfodialog'
          },
          {
            snippet: 'showConfirmDialog(${1:string|info}, ${2:function|callback_function})'
            displayText: 'showConfirmDialog(string info, function callback_function)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Displays text to the player and executes callback if they click OK.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#showconfirmdialog'
          },
          {
            snippet: 'showConfirmDialog(${1:string|info},\n\t' +
              'function (player_color)\n\t\t\n\tend\n)'
            displayText: 'showConfirmDialog(string info,  function (...))'
            type: 'function'
            leftLabel: 'bool'
            description: 'Displays text to the player and executes callback if they click OK.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#showconfirmdialog'
          },
          {
            snippet: 'showInputDialog(${1:string|description}, ${2:string|default_value}, ${3:function|callback_function})'
            displayText: 'showInputDialog(string description, string default_value, function callback_function)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Shows text input dialog to the player and executes callback if they click OK.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#showinputdialog'
          },
          {
            snippet: 'showInputDialog(${1:string|description}, ${2:string|default_value},\n\t' +
              'function (text, player_color)\n\t\t\n\tend\n)'
            displayText: 'showInputDialog(string description, string default_value,  function (...))'
            type: 'function'
            leftLabel: 'bool'
            description: 'Shows text input dialog to the player and executes callback if they click OK.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#showinputdialog'
          },
          {
            snippet: 'showMemoDialog(${1:string|description}, ${2:string|default_value}, ${3:function|callback_function})'
            displayText: 'showMemoDialog(string description, string default_value, function callback_function)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Shows memo input dialog to the player and executes callback if they click OK.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#showmemodialog'
          },
          {
            snippet: 'showMemoDialog(${1:string|description}, ${2:string|default_value},\n\t' +
              'function (text, player_color)\n\t\t\n\tend\n)'
            displayText: 'showMemoDialog(string description, string default_value,  function (...))'
            type: 'function'
            leftLabel: 'bool'
            description: 'Shows memo input dialog to the player and executes callback if they click OK.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#showmemodialog'
          },
          {
            snippet: 'showOptionsDialog(${1:string|description}, ${2:table|options}, ${3:int|default_value}, ${4:function|callback_function})'
            displayText: 'showOptionsDialog(string description, table options, int default_value, function callback_function)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Shows dropdown options dialog to the player and executes callback if they click OK.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#showoptionsdialog'
          },
          {
            snippet: 'showOptionsDialog(${1:string|description}, ${2:table|options}, ${3:int|default_value},\n\t' +
              'function (text, index, player_color)\n\t\t\n\tend\n)'
            displayText: 'showOptionsDialog(string description, table options, int default_value,  function (...))'
            type: 'function'
            leftLabel: 'bool'
            description: 'Shows dropdown options dialog to the player and executes callback if they click OK.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#showoptionsdialog'
          },
          {
            snippet: 'showColorDialog(${1:Color|default_color}, ${2:function|callback_function})'
            displayText: 'showColorDialog(Color default_color, function callback_function)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Shows color input dialog to the player and executes callback if they click OK.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#showmemodialog'
          },
          {
            snippet: 'showColorDialog(${1:Color|default_color},\n\t' +
              'function (color, player_color)\n\t\t\n\tend\n)'
            displayText: 'showColorDialog(Color default_color,  function (...))'
            type: 'function'
            leftLabel: 'bool'
            description: 'Shows color input dialog to the player and executes callback if they click OK.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/instance/#showmemodialog'
          },
        ]

      # Component
      else if ((prefix == "." || scopeDescriptor.scopes[1] == "variable.other.lua") && previous_token == "getComponent") || match_ending("component")
        suggestions = [
          {
            snippet: 'game_object'
            displayText: 'game_object'
            type: 'property'
            leftLabel: 'GameObject'
            description: 'The GameObject the Component is attached to.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/components/component/#game_object'
          },
          {
            snippet: 'name'
            displayText: 'name'
            type: 'property'
            leftLabel: 'string'
            description: 'The name of the GameObject.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/components/component/#name'
          },
          {
            snippet: 'get(${1:string|name})'
            displayText: 'get(string name)'
            type: 'function'
            leftLabel: 'any'
            description: 'Obtains the value of a given Variable on a Component.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/component/#get'
          },
          {
            snippet: 'getVars()'
            displayText: 'getVars()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns a table mapping Var names to their type.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/component/#getVars'
          },
          {
            snippet: 'set(${1:string|name}, ${2:any|value})'
            displayText: 'set(string name, any value)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets the Var of the specified `name` to the provided `value`.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/component/#set'
          },
        ]

      # GameObject
      else if match_ending("game_object")
        suggestions = [
          {
            snippet: 'name'
            displayText: 'name'
            type: 'property'
            leftLabel: 'string'
            description: 'The name of the GameObject.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/components/gameobject/#name'
          },
          {
            snippet: 'getChild(${1:string|name})'
            displayText: 'getChild(string name)'
            type: 'function'
            leftLabel: 'GameObject'
            description: 'Returns a child GameObject matching the specified name.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/components/gameobject/#getchild'
          },
          {
            snippet: 'getChildren()'
            displayText: 'getChildren()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns a table of all child GameObjects.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/components/gameobject/#getchildren'
          },
          {
            snippet: 'getComponent(${1:string|name})'
            displayText: 'getComponent(string name)'
            type: 'function'
            leftLabel: 'Component'
            description: 'Get the named component of an object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/components/gameobject/#getcomponent'
          },
          {
            snippet: 'getComponentInChildren(${1:string|name})'
            displayText: 'getComponentInChildren(string name)'
            type: 'function'
            leftLabel: 'Component'
            description: 'Get the named component of an object or its children.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/components/gameobject/#getcomponentinchildren'
          },
          {
            snippet: 'getComponents(${1:string|name})'
            displayText: 'getComponents(string name)'
            type: 'function'
            leftLabel: 'table'
            description: 'Get all components of an object. `name` is optional.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/components/gameobject/#getcomponents'
          },
          {
            snippet: 'getComponentsInChildren(${1:string|name})'
            displayText: 'getComponentsInChildren(string name)'
            type: 'function'
            leftLabel: 'table'
            description: 'Get all components of an object or its children. `name` is optional.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/components/gameobject/#getcomponentsinchildren'
          },
          {
            snippet: 'getMaterials()'
            displayText: 'getMaterials()'
            type: 'function'
            leftLabel: 'table'
            description: 'Get all materials of an object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/components/gameobject/#getmaterials'
          },
          {
            snippet: 'getMaterialsInChildren()'
            displayText: 'getMaterialsInChildren()'
            type: 'function'
            leftLabel: 'table'
            description: 'Get all materials of an object or its children.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/components/gameobject/#getcomponentsinchildren'
          },
        ]

      # Material
      else if match_ending("material")
        suggestions = [
          {
            snippet: 'game_object'
            displayText: 'game_object'
            type: 'property'
            leftLabel: 'GameObject'
            description: 'The GameObject the Material is attached to.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/components/material/#game_object'
          },
          {
            snippet: 'shader'
            displayText: 'shader'
            type: 'property'
            leftLabel: 'string'
            description: 'The name of the Shader used by the Material.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/components/material/#shader'
          },
          {
            snippet: 'get(${1:string|name})'
            displayText: 'get(string name)'
            type: 'function'
            leftLabel: 'any'
            description: 'Obtains the value of a given Variable on the Material.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/components/material/#get'
          },
          {
            snippet: 'getVars()'
            displayText: 'getVars()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns a table mapping Var names to their type.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/components/material/#getVars'
          },
          {
            snippet: 'set(${1:string|name}, ${2:any|value})'
            displayText: 'set(string name, any value)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets the Var of the specified `name` to the provided `value`.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/components/material/#set'
          },
        ]

      # Object
      else if ((prefix == "." || scopeDescriptor.scopes[1] == "variable.other.lua" || (tokens.length > 1 && this_token_intact)))
        # Prefix with behaviour if variable looks likely
        if match_ending("bundle")
          suggestions = [
            {
              snippet: 'getLoopingEffectIndex()'
              displayText: 'getLoopingEffectIndex()'
              type: 'function'
              leftLabel: 'int'
              description: 'Index of the currently looping effect. Indexes starts at 0.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/assetbundle/#getloopingeffectindex'
            },
            {
              snippet: 'getLoopingEffects()'
              displayText: 'getLoopingEffects()'
              type: 'function'
              leftLabel: 'table'
              description: 'Returns a Table with the keys "index" and "name" for each looping effect.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/assetbundle/#getloopingeffects'
            },
            {
              snippet: 'getLoopingEffects()\n\t' +
                '-- returns {{\n\t' +
                '--    index                     int,\n\t' +
                '--    name                      string\n' +
                '\t-- }}'
              displayText: 'getLoopingEffects({{int index, string name}})'
              type: 'function'
              leftLabel: 'table'
              description: 'Returns a Table with the keys "index" and "name" for each looping effect.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/assetbundle/#getloopingeffects'
            },
            {
              snippet: 'getTriggerEffects()'
              displayText: 'getTriggerEffects()'
              type: 'function'
              leftLabel: 'table'
              description: 'Returns a Table with the keys "index" and "name" for each trigger effect.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/assetbundle/#gettriggereffects'
            },
            {
              snippet: 'getTriggerEffects()\n\t' +
                '-- returns {{\n\t' +
                '--    index                     int,\n\t' +
                '--    name                      string\n' +
                '\t-- }}'
              displayText: 'getTriggerEffects({{int index, string name}})'
              type: 'function'
              leftLabel: 'table'
              description: 'Returns a Table with the keys "index" and "name" for each trigger effect.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/assetbundle/#gettriggereffects'
            },
            {
              snippet: 'playLoopingEffect(${1:int|index})'
              displayText: 'playLoopingEffect(int index)'
              type: 'function'
              leftLabel: 'bool'
              description: 'Starts playing a looping effect. Indexes starts at 0.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/assetbundle/#playloopingeffect'
            },
            {
              snippet: 'playTriggerEffect(${1:int|index})'
              displayText: 'playTriggerEffect(int index)'
              type: 'function'
              leftLabel: 'bool'
              description: 'Starts playing a trigger effect. Indexes starts at 0.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/assetbundle/#playtriggereffect'
            },
          ]
        else if match_ending("book")
          suggestions = [
            {
              snippet: 'page_offset'
              displayText: 'page_offset'
              type: 'property'
              leftLabel: 'int'
              description: 'The page numbers displayed in the Custom PDF UI are offset by this amount.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/book/'
            },
            {
              snippet: 'clearHighlight()'
              displayText: 'clearHighlight()'
              type: 'function'
              leftLabel: 'bool'
              description: 'Clears the current highlight.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/book/#clearhighlight'
            },
            {
              snippet: 'getPage(${1:bool|use_page_offset})'
              displayText: 'getPage(bool use_page_offset)'
              type: 'function'
              leftLabel: 'int'
              description: 'Gets the current page of the PDF.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/book/#getpage'
            },
            {
              snippet: 'setHighlight(${1:float|x1}, ${2:float|y1}, ${3:float|x2}, ${4:float|y2})'
              displayText: 'setHighlight(float x1, float y1, float x2, float y2)'
              type: 'function'
              leftLabel: 'bool'
              description: 'Set highlight box on current page.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/book/#sethighlight'
            },
            {
              snippet: 'setPage(${1:int|page}, ${2:bool|use_page_offset})'
              displayText: 'setPage(int page, bool use_page_offset)'
              type: 'function'
              leftLabel: 'bool'
              description: 'Set current page.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/book/#setpage'
            },
          ]
        else if match_ending("browser")
          suggestions = [
            {
              snippet: 'url'
              displayText: 'url'
              type: 'property'
              leftLabel: 'string'
              description: 'URL which currently wants to display.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/browser/#url'
            },
            {
              snippet: 'pixel_width'
              displayText: 'pixel_width'
              type: 'property'
              leftLabel: 'int'
              description: 'The pixel width the browser is virtually rendering to.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/browser/#pixel_width'
            },
          ]
        else if match_ending("clock")
          suggestions = [
            {
              snippet: 'paused'
              displayText: 'paused'
              type: 'property'
              leftLabel: 'bool'
              description: 'If the Clock\'s timer is paused. Setting this value will pause or resume the timer.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/clock/#paused'
            },
            {
              snippet: 'getValue()'
              displayText: 'getValue()'
              type: 'function'
              leftLabel: 'int'
              description: 'Returns the current value in stopwatch or timer mode as the number of seconds.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/clock/#getvalue'
            },
            {
              snippet: 'pauseStart()'
              displayText: 'pauseStart()'
              type: 'function'
              leftLabel: 'bool'
              description: 'Toggle function for pausing and resuming a stopwatch or timer on the Clock.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/clock/#pausestart'
            },
            {
              snippet: 'setValue(${1:int|seconds})'
              displayText: 'setValue(int seconds)'
              type: 'function'
              leftLabel: 'bool'
              description: 'Switches the clock to timer mode and sets the timer to the given value in seconds.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/clock/#setvalue'
            },
            {
              snippet: 'startStopwatch()'
              displayText: 'startStopwatch()'
              type: 'function'
              leftLabel: 'bool'
              description: 'Switches the Clock to stopwatch mode and begins the stopwatch from 0.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/clock/#startstopwatch'
            },
            {
              snippet: 'showCurrentTime()'
              displayText: 'showCurrentTime()'
              type: 'function'
              leftLabel: 'bool'
              description: 'Switches the Clock back to displaying the current time.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/clock/#showcurrenttime'
            },
          ]
        else if match_ending("counter")
          suggestions = [
            {
              snippet: 'clear()'
              displayText: 'clear()'
              type: 'function'
              leftLabel: 'bool'
              description: 'Resets the Counter value back to 0.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/counter/#clear'
            },
            {
              snippet: 'decrement()'
              displayText: 'decrement()'
              type: 'function'
              leftLabel: 'bool'
              description: 'Decrements the Counter\'s value by 1.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/counter/#decrement'
            },
            {
              snippet: 'getValue()'
              displayText: 'getValue()'
              type: 'function'
              leftLabel: 'int'
              description: 'Returns the current value of the Counter.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/counter/#getvalue'
            },
            {
              snippet: 'increment()'
              displayText: 'increment()'
              type: 'function'
              leftLabel: 'bool'
              description: 'Increments the Counter\'s value by 1.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/counter/#increment'
            },
            {
              snippet: 'setValue(${1:int|seconds})'
              displayText: 'setValue(int seconds)'
              type: 'function'
              leftLabel: 'bool'
              description: 'Sets the current value of the Counter.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/counter/#setvalue'
            },
          ]
        else if match_ending("figurine")
          suggestions = [
            {
              snippet: 'attack()'
              displayText: 'attack()'
              type: 'function'
              leftLabel: 'bool'
              description: 'Plays a random attack animation.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/rpgfigurine/#attack'
            },
            {
              snippet: 'changeMode()'
              displayText: 'changeMode()'
              type: 'function'
              leftLabel: 'bool'
              description: 'Changes the RPG Figurine\'s current mode.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/rpgfigurine/#changemode'
            },
            {
              snippet: 'die()'
              displayText: 'die()'
              type: 'function'
              leftLabel: 'bool'
              description: 'Plays the death animation. Call die() again to reset the RPG Figurine.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/rpgfigurine/#die'
            },
            {
              snippet: 'onAttack(hit_objects)\n\t${0: -- body...}\nend'
              displayText: 'onAttack(table hit_objects)'
              type: 'function'
              leftLabel: 'bool'
              description: 'This function is called, if it exists in your script, when this RPGFigurine attacks another RPGFigurine.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/rpgfigurine/#onattack'
            },
            {
              snippet: 'onHit(attacker)\n\t${0: -- body...}\nend'
              displayText: 'onHit(Object attacker)'
              type: 'function'
              leftLabel: 'bool'
              description: 'This function is called, if it exists in your script, when this RPGFigurine is attacked by another RPGFigurine.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/rpgfigurine/#onhit'
            },
          ]
        else if match_ending("layout_zone")
          suggestions = [
            {
              snippet: 'getOptions()'
              displayText: 'getOptions()'
              type: 'function'
              leftLabel: 'table'
              description: 'Returns the LayoutZone options.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/layoutzone/#getoptions'
            },
            {
              snippet: 'layout()'
              displayText: 'layout()'
              type: 'function'
              leftLabel: 'bool'
              description: 'Lays out the zone.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/layoutzone/#layout'
            },
            {
              snippet: 'setOptions(${1:table|options})'
              displayText: 'setOptions(table options)'
              type: 'function'
              leftLabel: 'table'
              description: 'Sets the LayoutZone options.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/layoutzone/#setoptions'
            },
            {
              snippet: 
                'setOptions({{\n\t' +
                'direction                 = ${1:-- int},\n\t' +
                'meld_direction            = ${2:-- int},\n\t' +
                'new_object_facing         = ${3:-- int},\n\t' +
                'trigger_for_face_up       = ${4:-- bool},\n\t' +
                'trigger_for_face_down     = ${5:-- bool},\n\t' +
                'trigger_for_non_cards     = ${6:-- bool},\n\t' +
                'allow_swapping            = ${7:-- bool},\n\t' +
                'max_objects_per_new_group = ${8:-- int},\n\t' +
                'max_objects_per_group     = ${9:-- int},\n\t' +
                'meld_sort                 = ${10:-- int},\n\t' +
                'meld_reverse_sort         = ${11:-- bool},\n\t' +
                'meld_sort_existing        = ${12:-- bool},\n\t' +
                'sticky_cards              = ${13:-- bool},\n\t' +
                'horizontal_spread         = ${14:-- float},\n\t' +
                'vertical_spread           = ${15:-- float},\n\t' +
                'horizontal_group_padding  = ${16:-- float},\n\t' +
                'vertical_group_padding    = ${17:-- float},\n\t' +
                'split_added_decks         = ${18:-- bool},\n\t' +
                'combine_into_decks        = ${19:-- bool},\n\t' +
                'cards_per_deck            = ${20:-- int},\n\t' +
                'alternate_directions      = ${21:-- bool},\n\t' +
                'randomize                 = ${22:-- bool},\n\t' +
                'instant_refill            = ${23:-- bool},\n\t' +
                'manual_only               = ${24:-- bool}\n' +
                '}})'
              displayText: 'setOptions({{int direction, int meld_direction, int new_object_facing, bool trigger_for_face_up, bool trigger_for_face_down, bool trigger_for_non_cards, bool allow_swapping, int max_objects_per_new_group, int max_objects_per_group, int meld_sort, bool meld_reverse_sort, bool meld_sort_existing, bool sticky_cards, float horizontal_spread, float vertical_spread, float horizontal_group_padding, float vertical_group_padding, bool split_added_decks, bool combine_into_decks, int cards_per_deck, bool alternate_directions, bool randomize, bool instant_refill, bool manual_only}})'
              type: 'function'
              leftLabel: 'table'
              description: 'Sets the LayoutZone options.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/layoutzone/#setoptions'
            },
          ]
        else if match_ending("text_tool")
          suggestions = [
            {
              snippet: 'getFontColor()'
              displayText: 'getFontColor()'
              type: 'function'
              leftLabel: 'Color'
              description: 'Returns the current font color as a Lua table keyed as table["r"], table["g"], and table["b"].'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/texttool/#getfontcolor'
            },
            {
              snippet: 'getFontSize()'
              displayText: 'getFontSize()'
              type: 'function'
              leftLabel: 'int'
              description: 'Returns the current font size.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/texttool/#getfontsize'
            },
            {
              snippet: 'getValue()'
              displayText: 'getValue()'
              type: 'function'
              leftLabel: 'string'
              description: 'Returns the current text.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/texttool/#getvalue'
            },
            {
              snippet: 'setFontColor(${1:Color|color})'
              displayText: 'setFontColor(Color color)'
              type: 'function'
              leftLabel: 'bool'
              description: 'Sets the current font color. The Lua table parameter should be keyed as table["r"], table["g"], and table["b"].'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/texttool/#setfontcolor'
            },
            {
              snippet: 'setFontSize(${1:int|font_size})'
              displayText: 'setFontSize(int font_size)'
              type: 'function'
              leftLabel: 'bool'
              description: 'Sets the current font size.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/texttool/#setfontsize'
            },
            {
              snippet: 'setValue(${1:string|text})'
              displayText: 'setValue(string text)'
              type: 'function'
              leftLabel: 'bool'
              description: 'Sets the current text.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/texttool/#setvalue'
            },
          ]
        else if match_ending("zone")
          suggestions = [
            {
              snippet: 'getOptions()'
              displayText: 'getOptions()'
              type: 'function'
              leftLabel: 'table'
              description: 'Returns the LayoutZone options.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/layoutzone/#getoptions'
            },
            {
              snippet: 'layout()'
              displayText: 'layout()'
              type: 'function'
              leftLabel: 'bool'
              description: 'Lays out the zone.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/layoutzone/#layout'
            },
            {
              snippet: 'setOptions(${1:table|options})'
              displayText: 'setOptions(table options)'
              type: 'function'
              leftLabel: 'table'
              description: 'Sets the LayoutZone options.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/layoutzone/#setoptions'
            },
            {
              snippet: 
                'setOptions({{\n\t' +
                'direction                 = ${1:-- int},\n\t' +
                'meld_direction            = ${2:-- int},\n\t' +
                'new_object_facing         = ${3:-- int},\n\t' +
                'trigger_for_face_up       = ${4:-- bool},\n\t' +
                'trigger_for_face_down     = ${5:-- bool},\n\t' +
                'trigger_for_non_cards     = ${6:-- bool},\n\t' +
                'allow_swapping            = ${7:-- bool},\n\t' +
                'max_objects_per_new_group = ${8:-- int},\n\t' +
                'max_objects_per_group     = ${9:-- int},\n\t' +
                'meld_sort                 = ${10:-- int},\n\t' +
                'meld_reverse_sort         = ${11:-- bool},\n\t' +
                'meld_sort_existing        = ${12:-- bool},\n\t' +
                'sticky_cards              = ${13:-- bool},\n\t' +
                'horizontal_spread         = ${14:-- float},\n\t' +
                'vertical_spread           = ${15:-- float},\n\t' +
                'horizontal_group_padding  = ${16:-- float},\n\t' +
                'vertical_group_padding    = ${17:-- float},\n\t' +
                'split_added_decks         = ${18:-- bool},\n\t' +
                'combine_into_decks        = ${19:-- bool},\n\t' +
                'cards_per_deck            = ${20:-- int},\n\t' +
                'alternate_directions      = ${21:-- bool},\n\t' +
                'randomize                 = ${22:-- bool},\n\t' +
                'instant_refill            = ${23:-- bool},\n\t' +
                'manual_only               = ${24:-- bool}\n' +
                '}})'
              displayText: 'setOptions({{int direction, int meld_direction, int new_object_facing, bool trigger_for_face_up, bool trigger_for_face_down, bool trigger_for_non_cards, bool allow_swapping, int max_objects_per_new_group, int max_objects_per_group, int meld_sort, bool meld_reverse_sort, bool meld_sort_existing, bool sticky_cards, float horizontal_spread, float vertical_spread, float horizontal_group_padding, float vertical_group_padding, bool split_added_decks, bool combine_into_decks, int cards_per_deck, bool alternate_directions, bool randomize, bool instant_refill, bool manual_only}})'
              type: 'function'
              leftLabel: 'table'
              description: 'Sets the LayoutZone options.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/layoutzone/#setoptions'
            },
          ]

        suggestions = suggestions.concat [
          {
            snippet: 'alt_view_angle'
            displayText: 'alt_view_angle'
            type: 'property'
            leftLabel: 'Vector'
            description: 'When non-zero, the Alt view will use the specified Euler angle to look at the object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#alt_view_angle'
          },
          {
            snippet: 'angular_drag'
            displayText: 'angular_drag'
            type: 'property'
            leftLabel: 'float'
            description: 'The Object\'s angular drag.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#angular_drag'
          },
          {
            snippet: 'AssetBundle'
            displayText: 'AssetBundle'
            type: 'property'
            leftLabel: 'AssetBundle'
            description: 'A reference to the AssetBundle class attached to this Object, or nil. Read only.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#assetbundle'
          },
          {
            snippet: 'auto_raise'
            displayText: 'auto_raise'
            type: 'property'
            leftLabel: 'bool'
            description: 'Should this Object automatically raise above other Objects when held?'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#auto_raise'
          },
          {
            snippet: 'bounciness'
            displayText: 'bounciness'
            type: 'property'
            leftLabel: 'float'
            description: 'The Object\'s bounciness.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#bounciness'
          },
          {
            snippet: 'Clock'
            displayText: 'Clock'
            type: 'property'
            leftLabel: 'Clock'
            description: 'A reference to the Clock class attached to this Object. Read only.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#clock'
          },
          {
            snippet: 'Counter'
            displayText: 'Counter'
            type: 'property'
            leftLabel: 'Counter'
            description: 'A reference to the Counter class attached to this Object. Read only.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#counter'
          },
          {
            snippet: 'drag'
            displayText: 'drag'
            type: 'property'
            leftLabel: 'float'
            description: 'The Object\'s drag.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#drag'
          },
          {
            snippet: 'drag_selectable'
            displayText: 'drag_selectable'
            type: 'property'
            leftLabel: 'bool'
            description: 'Whether the Object may be selected with the drag-selection box.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#drag_selectable'
          },
          {
            snippet: 'dynamic_friction'
            displayText: 'dynamic_friction'
            type: 'property'
            leftLabel: 'float'
            description: 'The Object\'s dynamic friction.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#dynamic_friction'
          },
          {
            snippet: 'gizmo_selectable'
            displayText: 'gizmo_selectable'
            type: 'property'
            leftLabel: 'bool'
            description: 'Whether the Object may be selected using the gizmo.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#gizmo_selectable'
          },
          {
            snippet: 'grid_projection'
            displayText: 'grid_projection'
            type: 'property'
            leftLabel: 'bool'
            description: 'Should the grid project onto this object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#grid_projection'
          },
          {
            snippet: 'guid'
            displayText: 'guid'
            type: 'property'
            leftLabel: 'string'
            description: 'The Object\'s guid. This is the same as the getGUID function. Read only.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#guid'
          },
          {
            snippet: 'held_by_color'
            displayText: 'held_by_color'
            type: 'property'
            leftLabel: 'string'
            description: 'The color of the Player currently holding the Object. Read only.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#held_by_color'
          },
          {
            snippet: 'held_flip_index'
            displayText: 'held_flip_index'
            type: 'property'
            leftLabel: 'int'
            description: '0-23 value. Changes when a Player hits flip or alt + rotate.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#held_flip_index'
          },
          {
            snippet: 'held_position_offset'
            displayText: 'held_position_offset'
            type: 'property'
            leftLabel: 'Vector'
            description: 'Position offset from pointer'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#held_position_offset'
          },
          {
            snippet: 'held_reduce_force'
            displayText: 'held_reduce_force'
            type: 'property'
            leftLabel: 'bool'
            description: 'When the Object collides with something while moving this is automatically enabled and reduces the movement force.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#held_reduce_force'
          },
          {
            snippet: 'held_rotation_offset'
            displayText: 'held_rotation_offset'
            type: 'property'
            leftLabel: 'Vector'
            description: 'Rotation offset from pointer.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#held_rotation_offset'
          },
          {
            snippet: 'hide_when_face_down'
            displayText: 'hide_when_face_down'
            type: 'property'
            leftLabel: 'bool'
            description: 'Hides the face of the object if it is face-down.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#hide_when_face_down'
          },
          {
            snippet: 'held_spin_index'
            displayText: 'held_spin_index'
            type: 'property'
            leftLabel: 'int'
            description: '0-23 value. Changes when a Player rotates the Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#held_spin_index'
          },
          {
            snippet: 'hide_when_face_down'
            displayText: 'hide_when_face_down'
            type: 'property'
            leftLabel: 'bool'
            description: 'Hide the Object when face-down, as if it were in a hand zone.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#hide_when_face_down'
          },
          {
            snippet: 'ignore_fog_of_war'
            displayText: 'ignore_fog_of_war'
            type: 'property'
            leftLabel: 'bool'
            description: 'If true then the object is always visible inside fog-of-war.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#ignore_fog_of_war'
          },
          {
            snippet: 'interactable'
            displayText: 'interactable'
            type: 'property'
            leftLabel: 'bool'
            description: 'Can players interact with this Object? If false, only Lua Scripts can interact with this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#interactable'
          },
          {
            snippet: 'is_face_down'
            displayText: 'is_face_down'
            type: 'property'
            leftLabel: 'bool'
            description: 'True if the object is roughly face-down.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#is_face_down'
          },
          {
            snippet: 'LayoutZone'
            displayText: 'LayoutZone'
            type: 'property'
            leftLabel: 'LayoutZone'
            description: 'Access the object\'s LayoutZone behaviour if it has one.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/layoutzone/'
          },
          {
            snippet: 'loading_custom'
            displayText: 'loading_custom'
            type: 'property'
            leftLabel: 'bool'
            description: 'Indicates if the assets of a custom element are being loaded.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#loading_custom'
          },
          {
            snippet: 'locked'
            displayText: 'locked'
            type: 'property'
            leftLabel: 'bool'
            description: 'If the object is frozen in place (preventing physics interactions).'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#locked'
          },
          {
            snippet: 'mass'
            displayText: 'mass'
            type: 'property'
            leftLabel: 'float'
            description: 'The Object\'s mass.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#mass'
          },
          {
            snippet: 'max_typed_number'
            displayText: 'max_typed_number'
            type: 'property'
            leftLabel: 'int'
            description: 'Determines the maximum number of digits which a user may type whilst hovering over the object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#max_typed_number'
          },
          {
            snippet: 'measure_movement'
            displayText: 'measure_movement'
            type: 'property'
            leftLabel: 'bool'
            description: 'Measure Tool will automatically be used when moving the Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#measure_movement'
          },
          {
            snippet: 'memo'
            displayText: 'memo'
            type: 'property'
            leftLabel: 'string'
            description: 'A string where you may persist user-data associated with the object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#memo'
          },
          {
            snippet: 'name'
            displayText: 'name'
            type: 'property'
            leftLabel: 'string'
            description: 'The Object\'s formated name or nickname if applicable. Read only.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#name'
          },
          {
            snippet: 'pick_up_position'
            displayText: 'pick_up_position'
            type: 'property'
            leftLabel: 'Vector'
            description: 'The position of the Object when it was picked up. Read only.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#pick_up_position'
          },
          {
            snippet: 'pick_up_rotation'
            displayText: 'pick_up_rotation'
            type: 'property'
            leftLabel: 'Vector'
            description: 'The rotation of the Object when it was picked up. Read only.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#pick_up_rotation'
          },
          {
            snippet: 'remainder'
            displayText: 'remainder'
            type: 'property'
            leftLabel: 'Object'
            description: 'If takeObject has left only one item in this container, this will refer to that item.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#remainder'
          },
          {
            snippet: 'resting'
            displayText: 'resting'
            type: 'property'
            leftLabel: 'bool'
            description: 'Returns true if this Object is not moving. Read only.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#resting'
          },
          {
            snippet: 'RPGFigurine'
            displayText: 'RPGFigurine'
            type: 'property'
            leftLabel: 'RPGFigurine'
            description: 'A reference to the RPGFigurine class attached to this Object. Read only.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#rpgfigurine'
          },
          {
            snippet: 'script_code'
            displayText: 'script_code'
            type: 'property'
            leftLabel: 'string'
            description: 'Returns the Lua script on this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#script_code'
          },
          {
            snippet: 'script_state'
            displayText: 'script_state'
            type: 'property'
            leftLabel: 'string'
            description: 'Returns the saved Lua script state on the Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#script_state'
          },
          {
            snippet: 'spawning'
            displayText: 'spawning'
            type: 'property'
            leftLabel: 'bool'
            description: 'Indicates if any object is currently in the process of spawning.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#spawning'
          },
          {
            snippet: 'static_friction'
            displayText: 'static_friction'
            type: 'property'
            leftLabel: 'float'
            description: 'The Object\'s static friction.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#static_friction'
          },
          {
            snippet: 'sticky'
            displayText: 'sticky'
            type: 'property'
            leftLabel: 'bool'
            description: 'Should Objects on top of this Object stick to this Object when this Object is picked up?'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#sticky'
          },
          {
            snippet: 'tooltip'
            displayText: 'tooltip'
            type: 'property'
            leftLabel: 'bool'
            description: 'Should Object show tooltips when hovering over it.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#tooltip'
          },
          {
            snippet: 'type'
            displayText: 'type'
            type: 'property'
            leftLabel: 'string'
            description: 'The Object\'s type. Read Only.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#type'
          },
          {
            snippet: 'TextTool'
            displayText: 'TextTool'
            type: 'property'
            leftLabel: 'TextTool'
            description: 'A reference to the TextTool class attached to this Object. Read only.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#texttool'
          },
          {
            snippet: 'use_gravity'
            displayText: 'use_gravity'
            type: 'property'
            leftLabel: 'bool'
            description: 'Does gravity affect this Object?'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#use_gravity'
          },
          {
            snippet: 'use_grid'
            displayText: 'use_grid'
            type: 'property'
            leftLabel: 'bool'
            description: 'Should this Object snap to grid points?'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#use_grid'
          },
          {
            snippet: 'use_hands'
            displayText: 'use_hands'
            type: 'property'
            leftLabel: 'bool'
            description: 'Should this Object go into player hands?'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#use_hands'
          },
          {
            snippet: 'use_rotation_value_flip'
            displayText: 'use_rotation_value_flip'
            type: 'property'
            leftLabel: 'bool'
            description: 'When true the object will flip between its rotation values on a flip action.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#use_rotation_value_flip'
          },
          {
            snippet: 'use_snap_points'
            displayText: 'use_snap_points'
            type: 'property'
            leftLabel: 'bool'
            description: 'Should this Object snap to snap points?'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#use_snap_points'
          },
          {
            snippet: 'value'
            displayText: 'value'
            type: 'property'
            leftLabel: 'int'
            description: 'A numeric value associated with the object, which when non-zero, will be displayed when hovering over the object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#value'
          },
          {
            snippet: 'addAttachment(${1:Object|object})'
            displayText: 'addAttachment(Object object)'
            type: 'function'
            leftLabel: 'bool'
            description: 'The Object supplied as param is destroyed and becomes a dummy Object child.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#addattachment'
          },
          {
            snippet: 'addContextMenuItem(${1:string|label}, ${2:function|f}, ${3:bool|keep_open})'
            displayText: 'addContextMenuItem(string label, function f, bool keep_open)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Add a context menu item onto the object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#addcontextmenuitem'
          },
          {
            snippet: 'addDecal(${1:table|decal})'
            displayText: 'addDecal(table decal)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Add a Decal onto the object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#adddecal'
          },
          {
            snippet: 
              'addDecal({\n\t' +
              'name                      = ${1:-- string},\n\t' +
              'url                       = ${2:-- string},\n\t' +
              'position                  = ${3:-- Vector},\n\t' +
              'rotation                  = ${4:-- Vector},\n\t' +
              'scale                     = ${5:-- float}\n' +
              '})'
            displayText: 'addDecal({string name, string url, Vector position, Vector rotation, float scale})'
            type: 'function'
            leftLabel: 'bool'
            description: 'Add a Decal onto the object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#adddecal'
          },
          {
            snippet: 'addForce(${1:Vector|force_vector}, ${2:int|force_type})'
            displayText: 'addForce(Vector force_vector, int force_type)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Adds a force vector to the Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#addforce'
          },
          {
            snippet: 'addTag(${1:string|tag})'
            displayText: 'addTag(string tag)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Adds a tag to the Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#addtag'
          },
          {
            snippet: 'addToPlayerSelection(${1:string|player_color})'
            displayText: 'addToPlayerSelection(string player_color)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Add object to player\'s selection'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#addtoplayerselection'
          },
          {
            snippet: 'addTorque(${1:Vector|torque_vector}, ${2:int|force_type})'
            displayText: 'addTorque(Vector torque_vector, int force_type)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Adds a torque vector to the Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#addtorque'
          },
          {
            snippet: 'attachHider(${1:string|hider}, ${2:bool|enabled}, ${3:table|players})'
            displayText: 'attachHider(string hider, bool enabled, table players)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Attaches a hider to the object (or removes it if enabled is false).'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#attachhider'
          },
          {
            snippet: 'attachInvisibleHider(${1:string|hider}, ${2:bool|enabled}, ${3:table|players})'
            displayText: 'attachInvisibleHider(string hider, bool enabled, table players)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Attaches an invisible hider to the object (or removes it if enabled is false).'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#attachhider'
          },
          {
            snippet: 'call(${1:string|function_name}, ${2:table|parameters})'
            displayText: 'call(string function_name, table parameters)'
            type: 'function'
            leftLabel: 'any'
            description: 'Calls a Lua function owned by this Object and passes an optional table as parameters to the function.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#call'
          },
          {
            snippet: 'clearButtons()'
            displayText: 'clearButtons()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Clears all 3D UI buttons on this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#clearbuttons'
          },
          {
            snippet: 'clearContextMenu()'
            displayText: 'clearContextMenu()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Clears all added context menu items on this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#clearcontextmenu'
          },
          {
            snippet: 'clearInputs()'
            displayText: 'clearInputs()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Clears all 3D UI text inputs on this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#clearinputs'
          },
          {
            snippet: 'clone(${1:table|parameters})'
            displayText: 'clone(table parameters)'
            type: 'function'
            leftLabel: 'Object'
            description: 'Copies and pastes this Object. Returns a reference to the newly spawned Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#clone'
          },
          {
            snippet: 
              'clone({\n\t' +
              'position                  = ${1:-- Vector   [x=0, y=3, z=0]},\n\t' +
              'snap_to_grid              = ${2:-- bool     [false]}\n' +
              '})'
            displayText: 'clone({Vector position, bool snap_to_grid})'
            type: 'function'
            leftLabel: 'Object'
            description: 'Copies and pastes this Object. Returns a reference to the newly spawned Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#clone'
          },
          {
            snippet: 'createButton(${1:table|button})'
            displayText: 'createButton(table button)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Creates a 3D UI button on this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#createbutton'
          },
          {
            snippet: 
              'createButton({\n\t' +
              'click_function            = ${1:-- string   (required)},\n\t' +
              'function_owner            = ${2:-- Object   (required)},\n\t' +
              'label                     = ${3:-- string},\n\t' +
              'position                  = ${4:-- Vector},\n\t' +
              'rotation                  = ${5:-- Vector},\n\t' +
              'scale                     = ${6:-- Vector},\n\t' +
              'width                     = ${7:-- int},\n\t' +
              'height                    = ${8:-- int},\n\t' +
              'font_size                 = ${9:-- int},\n\t' +
              'color                     = ${10:-- Color},\n\t' +
              'font_color                = ${11:-- Color},\n\t' +
              'hover_color               = ${12:-- Color},\n\t' +
              'press_color               = ${13:-- Color},\n\t' +
              'tooltip                   = ${14:-- string}\n' +
              '})'
            displayText: 'createButton({string click_function, Object function_owner, string label, Vector position, Vector rotation, Vector scale, int width, int height, int font_size, Color color, Color font_color, Color hover_color, Color press_color, string tooltip})'
            type: 'function'
            leftLabel: 'bool'
            description: 'Creates a 3D UI button on this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#createbutton'
          },
          {
            snippet: 'createInput(${1:table|input})'
            displayText: 'createInput(table input)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Creates a 3D UI text input on this Object. If input_function returns a string it overrides the input contents.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#createinput'
          },
          {
            snippet: 
              'createInput({\n\t' +
              'input_function            = ${1:-- string   (required)},\n\t' +
              'function_owner            = ${2:-- Object   (required)},\n\t' +
              'label                     = ${3:-- string},\n\t' +
              'alignment                 = ${4:-- int      (1 = Automatic, 2 = Left, 3 = Center, 4 = Right, 5 = Justified)},\n\t' +
              'position                  = ${5:-- Vector},\n\t' +
              'rotation                  = ${6:-- Vector},\n\t' +
              'scale                     = ${7:-- Vector},\n\t' +
              'width                     = ${8:-- int},\n\t' +
              'height                    = ${9:-- int},\n\t' +
              'font_size                 = ${10:-- int},\n\t' +
              'color                     = ${11:-- Color},\n\t' +
              'font_color                = ${12:-- Color},\n\t' +
              'tooltip                   = ${13:-- Color},\n\t' +
              'value                     = ${14:-- string},\n\t' +
              'validation                = ${15:-- int      (1 = None, 2 = Integer, 3 = Float, 4 = Alphanumeric, 5 = Username, 6 = Name)},\n\t' +
              'tab                       = ${16:-- int      (1 = None, 2 = Select Next, 3 = Indent)}\n' +
              '})'
            displayText: 'createInput({string input_function, Object function_owner, string label, int alignment, Vector position, Vector rotation, Vector scale, int width, int height, int font_size, Color color, Color font_color, Color tooltip, string value, int validation, int tab})'
            type: 'function'
            leftLabel: 'bool'
            description: 'Creates a 3D UI text input on this Object. If input_function returns a string it overrides the input contents.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#createinput'
          },
          {
            snippet: 'cut(${1:int|index})'
            displayText: 'cut(int index)'
            type: 'function'
            leftLabel: 'table'
            description: 'Cuts a deck at the given card index and returns created objects.  If no index provided cuts deck in half.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#cut'
          },
          {
            snippet: 'deal(${1:int|number}, ${2:string|player_color}, ${3:int|hand_index})'
            displayText: 'deal(int number, string player_color, int hand_index)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Deals to player\'s hand. If no player_color supplied it will deal to all seated players.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#deal'
          },
          {
            snippet: 'dealToColorWithOffset(${1:Vector|offset}, ${2:bool|flip}, ${3:string|player_color})'
            displayText: 'dealToColorWithOffset(Vector offset, bool flip, string player_color)'
            type: 'function'
            leftLabel: 'Object'
            description: 'Deals a Card to a player with an offset from their hand.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#dealtocolorwithoffset'
          },
          {
            snippet: 'destroyAttachment(${1:int|index})'
            displayText: 'destroyAttachment(int index)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Destroys an attachment with the given index.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#destroyattachment'
          },
          {
            snippet: 'destroyAttachments()'
            displayText: 'destroyAttachments()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Destroys all attachments.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#destroyattachments'
          },
          {
            snippet: 'destruct()'
            displayText: 'destruct()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Destroys this Object. Mainly so you can call self.destruct().'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#destruct'
          },
          {
            snippet: 'drop()'
            displayText: 'drop()'
            type: 'function'
            leftLabel: 'bool'
            description: 'If held the object will be dropped.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#drop'
          },
          {
            snippet: 'editButton(${1:table|button})'
            displayText: 'editButton(table button)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Edits a 3D UI button on this Object based on its index.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#editbutton'
          },
          {
            snippet: 
              'editButton({\n\t' +
              'index                     = ${1:-- int      (required)},\n\t' +
              'click_function            = ${2:-- string},\n\t' +
              'function_owner            = ${3:-- Object},\n\t' +
              'label                     = ${4:-- string},\n\t' +
              'position                  = ${5:-- Vector},\n\t' +
              'rotation                  = ${6:-- Vector},\n\t' +
              'scale                     = ${7:-- Vector},\n\t' +
              'width                     = ${8:-- int},\n\t' +
              'height                    = ${9:-- int},\n\t' +
              'font_size                 = ${10:-- int},\n\t' +
              'color                     = ${11:-- Color},\n\t' +
              'font_color                = ${12:-- Color}\n' +
              '})'
            displayText: 'editButton({int index, string click_function, Object function_owner, string label, Vector position, Vector rotation, Vector scale, int width, int height, int font_size, Color color, Color font_color})'
            type: 'function'
            leftLabel: 'bool'
            description: 'Edits a 3D UI button on this Object based on its index.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#editbutton'
          },
          {
            snippet: 'editInput(${1:table|input})'
            displayText: 'editInput(table input)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Edits a 3D UI input on this Object based on its index.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#editinput'
          },
          {
            snippet: 
              'editInput({\n\t' +
              'index                     = ${1:-- int      (required)},\n\t' +
              'input_function            = ${2:-- string},\n\t' +
              'function_owner            = ${3:-- Object},\n\t' +
              'label                     = ${4:-- string},\n\t' +
              'alignment                 = ${5:-- int      (1 = Automatic, 2 = Left, 3 = Center, 4 = Right, 5 = Justified)},\n\t' +
              'position                  = ${6:-- Vector},\n\t' +
              'rotation                  = ${7:-- Vector},\n\t' +
              'scale                     = ${8:-- Vector},\n\t' +
              'width                     = ${9:-- int},\n\t' +
              'height                    = ${10:-- int},\n\t' +
              'font_size                 = ${11:-- int},\n\t' +
              'color                     = ${12:-- Color},\n\t' +
              'font_color                = ${13:-- Color},\n\t' +
              'tooltip                   = ${14:-- Color},\n\t' +
              'value                     = ${15:-- string},\n\t' +
              'validation                = ${16:-- int      (1 = None, 2 = Integer, 3 = Float, 4 = Alphanumeric, 5 = Username, 6 = Name)},\n\t' +
              'tab                       = ${17:-- int      (1 = None, 2 = Select Next, 3 = Indent)}\n' +
              '})'
            displayText: 'editInput({int index, string input_function, Object function_owner, string label, int alignment, Vector position, Vector rotation, Vector scale, int width, int height, int font_size, Color color, Color font_color, Color tooltip, string value, int validation, int tab})'
            type: 'function'
            leftLabel: 'bool'
            description: 'Edits a 3D UI input on this Object based on its index.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#editinput'
          },
          {
            snippet: 'flip()'
            displayText: 'flip()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Flips this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#flip'
          },
          {
            snippet: 'getAngularVelocity()'
            displayText: 'getAngularVelocity()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns the current angular velocity vector of the Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getangularvelocity'
          },
          {
            snippet: 'getAttachments()'
            displayText: 'getAttachments()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns a table in the same format as getObjects() for containers.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getattachments'
          },
          {
            snippet: 'getAttachments()\n\t' +
              '-- returns {{\n\t' +
              '--    name                      string,\n\t' +
              '--    description               string,\n\t' +
              '--    guid                      string,\n\t' +
              '--    index                     int,\n\t' +
              '--    lua_script                string,\n\t' +
              '--    lua_script_state          string\n' +
              '\t-- }}'
            displayText: 'getAttachments({{string name, string description, string guid, int index, string lua_script, string lua_script_state}})'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns a table in the same format as getObjects() for containers.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getattachments'
          },
          {
            snippet: 'getTags()'
            displayText: 'getTags()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns the tags attached to the Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#gettags'
          },
          {
            snippet: 'getBounds()'
            displayText: 'getBounds()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns the world space axis aligned Bounds of the Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getbounds'
          },
          {
            snippet: 'getBoundsNormalized()'
            displayText: 'getBoundsNormalized()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns the world space axis aligned Bounds of the Object\'s colliders at zero rotation.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getboundsnormalized'
          },
          {
            snippet: 'getButtons()'
            displayText: 'getButtons()'
            type: 'function'
            leftLabel: 'table'
            description: 'Gets a list of all the 3D UI buttons on this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getbuttons'
          },
          {
            snippet: 'getButtons()\n\t' +
              '-- returns {{\n\t' +
              '--    index                     int,\n\t' +
              '--    click_function            string,\n\t' +
              '--    function_owner            Object,\n\t' +
              '--    label                     string,\n\t' +
              '--    position                  Vector,\n\t' +
              '--    rotation                  Vector,\n\t' +
              '--    scale                     Vector,\n\t' +
              '--    width                     int,\n\t' +
              '--    height                    int,\n\t' +
              '--    font_size                 int,\n\t' +
              '--    color                     Color,\n\t' +
              '--    font_color                Color\n' +
              '\t-- }}'
            displayText: 'getButtons({{int index, string click_function, Object function_owner, string label, Vector position, Vector rotation, Vector scale, int width, int height, int font_size, Color color, Color font_color}})'
            type: 'function'
            leftLabel: 'table'
            description: 'Gets a list of all the 3D UI buttons on this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getbuttons'
          },
          {
            snippet: 'getColorTint()'
            displayText: 'getColorTint()'
            type: 'function'
            leftLabel: 'Color'
            description: 'Returns the color tint for this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getcolortint'
          },
          {
            snippet: 'getChild(${1:string|name})'
            displayText: 'getChild(string name)'
            type: 'function'
            leftLabel: 'GameObject'
            description: 'Returns a child GameObject matching the specified name.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getchild'
          },
          {
            snippet: 'getChildren()'
            displayText: 'getChildren()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns a table of all child GameObjects.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getchildren'
          },
          {
            snippet: 'getComponent(${1:string|name})'
            displayText: 'getComponent(string name)'
            type: 'function'
            leftLabel: 'Component'
            description: 'Get the named component of an object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getcomponent'
          },
          {
            snippet: 'getComponentInChildren(${1:string|name})'
            displayText: 'getComponentInChildren(string name)'
            type: 'function'
            leftLabel: 'Component'
            description: 'Get the named component of an object or its children.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getcomponentinchildren'
          },
          {
            snippet: 'getComponents(${1:string|name})'
            displayText: 'getComponents(string name)'
            type: 'function'
            leftLabel: 'table'
            description: 'Get all components of an object. `name` is optional.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getcomponents'
          },
          {
            snippet: 'getComponentsInChildren(${1:string|name})'
            displayText: 'getComponentsInChildren(string name)'
            type: 'function'
            leftLabel: 'table'
            description: 'Get all components of an object or its children. `name` is optional.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getcomponentsinchildren'
          },
          {
            snippet: 'getComponentVar(${1:string|component_name}, ${2:string|variable_name})'
            displayText: 'getComponentVar(string component_name, string variable_name)'
            type: 'function'
            leftLabel: 'any'
            description: 'Get the current value of a component of an object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getcomponentvar'
          },
          {
            snippet: 'getCustomObject()'
            displayText: 'getCustomObject()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns the custom parameters on a Custom Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getcustomobject'
          },
          {
            snippet: 'getCustomObject()\n\t' +
              '-- returns {\n\t' +
              '--    image                     string   (Image URL for Custom Board, Custom Dice, Custom Figurine, Custom Tile, and Custom Token.)},\n\t' +
              '--    image_secondary           string   (Secondary / Back Image URL for Custom Figurine or Custom Tile.)},\n\t' +
              '--    type                      int      (The number of sides of the Custom Dice, the shape of the Custom Tile, the type of Custom Mesh, or the type of Custom AssetBundle.)},\n\t' +
              '--    thickness                 float    (Thickness of the Custom Tile or Custom Token.)},\n\t' +
              '--    stackable                 bool     (Is this Custom Tile or Custom Token stackable?)},\n\t' +
              '--    merge_distance            float    (The accuracy of the Custom Tile to it\'s base image.)},\n\t' +
              '--    mesh                      string   (Mesh URL for the Custom Mesh.)},\n\t' +
              '--    diffuse                   string   (Diffuse image URL for the Custom Mesh.)},\n\t' +
              '--    normal                    string   (Normal image URL for the Custom Mesh.)},\n\t' +
              '--    collider                  string   (Collider URL for the Custom Mesh.)},\n\t' +
              '--    convex                    bool     (Is this Custom Mesh concave?)},\n\t' +
              '--    material                  int      (The material for the Custom Mesh or Custom AssetBundle.)},\n\t' +
              '--    specular_intensity        float    (The specular intensity for the Custom Mesh.)},\n\t' +
              '--    specular_color            Color    (The specular color for the Custom Mesh.)},\n\t' +
              '--    specular_sharpness        float    (The specular sharpness for the Custom Mesh.)},\n\t' +
              '--    fresnel_strength          float    (The fresnel strength for the Custom Mesh.)},\n\t' +
              '--    cast_shadows              bool     (Does this Custom Mesh cast shadows?)},\n\t' +
              '--    assetbundle               string   (AssetBundle URL for this Custom AssetBundle.)},\n\t' +
              '--    assetbundle_secondary     string   (Secondary AssetBundle URL for this Custom AssetBundle.)}\n' +
              '\t-- }'
            displayText: 'getCustomObject({string image, string image_secondary, int type, float thickness, bool stackable, float merge_distance, string mesh, string diffuse, string normal, string collider, bool convex, int material, float specular_intensity, Color specular_color, float specular_sharpness, float fresnel_strength, bool cast_shadows, string assetbundle, string assetbundle_secondary})'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns the custom parameters on a Custom Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getcustomobject'
          },
          {
            snippet: 'getData()'
            displayText: 'getData()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns a table data structure representation of the object. Works with spawnObjectData.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getdata'
          },
          {
            snippet: 'getData()\n\t' +
              '-- returns {\n\t' +
              '--    data                      table,\n\t' +
              '--    position                  Vector,\n\t' +
              '--    rotation                  Vector,\n\t' +
              '--    scale                     Vector,\n\t' +
              '--    callback_function         function\n' +
              '\t-- }'
            displayText: 'getData({table data, Vector position, Vector rotation, Vector scale, function callback_function})'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns a table data structure representation of the object. Works with spawnObjectData.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getdata'
          },
          {
            snippet: 'getDecals()'
            displayText: 'getDecals()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns a table of sub-tables, each sub-table representing one decal.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getdecals'
          },
          {
            snippet: 'getDecals()\n\t' +
              '-- returns {{\n\t' +
              '--    name                      string   (Name of decal)},\n\t' +
              '--    url                       string   (Filepath or URL of image)},\n\t' +
              '--    position                  Vector   (Position on Object)},\n\t' +
              '--    rotation                  Vector   (Rotation relative to Object)},\n\t' +
              '--    scale                     float    (1 is normal scale)}\n' +
              '\t-- }}'
            displayText: 'getDecals({{string name, string url, Vector position, Vector rotation, float scale}})'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns a table of sub-tables, each sub-table representing one decal.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getdecals'
          },
          {
            snippet: 'getDescription()'
            displayText: 'getDescription()'
            type: 'function'
            leftLabel: 'string'
            description: 'Gets the description for this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getdescription'
          },
          {
            snippet: 'getFogOfWarReveal()'
            displayText: 'getFogOfWarReveal()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns the fog-of-war reveal settings for this Object: {bool reveal, string color, float range}.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getfogofwarreveal'
          },
          {
            snippet: 'getFogOfWarReveal()\n\t' +
              '-- returns {\n\t' +
              '--    reveal                    bool,\n\t' +
              '--    color                     string,\n\t' +
              '--    range                     float\n' +
              '\t-- }'
            displayText: 'getFogOfWarReveal({bool reveal, string color, float range})'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns the fog-of-war reveal settings for this Object: {bool reveal, string color, float range}.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getfogofwarreveal'
          },
          {
            snippet: 'getGMNotes()'
            displayText: 'getGMNotes()'
            type: 'function'
            leftLabel: 'string'
            description: 'Returns the GM notes attached to this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getgmnotes'
          },
          {
            snippet: 'getGUID()'
            displayText: 'getGUID()'
            type: 'function'
            leftLabel: 'string'
            description: 'Returns the GUID that belongs to this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getguid'
          },
          {
            snippet: 'getInputs()'
            displayText: 'getInputs()'
            type: 'function'
            leftLabel: 'table'
            description: 'Gets a list of all the 3D UI inputs on this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getinputs'
          },
          {
            snippet: 'getInputs()\n\t' +
              '-- returns {{\n\t' +
              '--    index                     int,\n\t' +
              '--    click_function            string,\n\t' +
              '--    function_owner            Object,\n\t' +
              '--    label                     string,\n\t' +
              '--    position                  table,\n\t' +
              '--    rotation                  table,\n\t' +
              '--    scale                     table,\n\t' +
              '--    width                     int,\n\t' +
              '--    height                    int,\n\t' +
              '--    font_size                 int,\n\t' +
              '--    color                     Color,\n\t' +
              '--    font_color                Color,\n\t' +
              '--    tooltip                   string,\n\t' +
              '--    alignment                 int      (1 = Automatic, 2 = Left, 3 = Center, 4 = Right, 5 = Justified)},\n\t' +
              '--    value                     string,\n\t' +
              '--    validation                int      (1 = None, 2 = Integer, 3 = Float, 4 = Alphanumeric, 5 = Username, 6 = Name)},\n\t' +
              '--    tab                       int      (1 = None, 2 = Select Next, 3 = Indent)}\n' +
              '\t-- }}'
            displayText: 'getInputs({{int index, string click_function, Object function_owner, string label, table position, table rotation, table scale, int width, int height, int font_size, Color color, Color font_color, string tooltip, int alignment, string value, int validation, int tab}})'
            type: 'function'
            leftLabel: 'table'
            description: 'Gets a list of all the 3D UI inputs on this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getinputs'
          },
          {
            snippet: 'getJoints()'
            displayText: 'getJoints()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns information on any joints attached from this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getjoints'
          },
          {
            snippet: 'getJoints()\n\t' +
              '-- returns {{\n\t' +
              '--    type                      string   (One of: "Fixed", "Hinge" [H], "Spring" [S])},\n\t' +
              '--    joint_object_guid         string   (GUID of attached object)},\n\t' +
              '--    collision                 bool     (Is collision enabled?)},\n\t' +
              '--    break_force               float    (Force required to break joint)},\n\t' +
              '--    break_torque              float    (Torque required to break joint)},\n\t' +
              '--    axis                      Vector   ([H] Axis of rotation)},\n\t' +
              '--    anchor                    Vector   ([H] Position of anchor)},\n\t' +
              '--    connector_anchor          Vector   ([H] Position on connected Object)},\n\t' +
              '--    motor_force               float    ([H] Option A: Force of rotation)},\n\t' +
              '--    motor_velocity            float    ([H] Option B: Velocity of rotaton)},\n\t' +
              '--    motor_free_spin           bool     (If enabled the motor will only accelerate but never slow down)},\n\t' +
              '--    spring                    float    (Force used to keep objects together)},\n\t' +
              '--    damper                    float    (Force used to dampen spring)},\n\t' +
              '--    max_distance              float    (Maximum distance objects may be apart)},\n\t' +
              '--    min_distance              float    (Minimum distance objects may be apart)}\n' +
              '\t-- }}'
            displayText: 'getJoints({{string type, string joint_object_guid, bool collision, float break_force, float break_torque, Vector axis, Vector anchor, Vector connector_anchor, float motor_force, float motor_velocity, bool motor_free_spin, float spring, float damper, float max_distance, float min_distance}})'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns information on any joints attached from this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getjoints'
          },
          {
            snippet: 'getJSON(${1:bool|indented})'
            displayText: 'getJSON(bool indented)'
            type: 'function'
            leftLabel: 'string'
            description: 'Returns a serialization of the JSON string which represents this item.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#get-functions'
          },
          {
            snippet: 'getLock()'
            displayText: 'getLock()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Get the lock status of this object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getlock'
          },
          {
            snippet: 'getLoopingEffectIndex()'
            displayText: 'getLoopingEffectIndex()'
            type: 'function'
            leftLabel: 'int'
            description: 'Returns the index of the currently looping effect.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/assetbundle/#getloopingeffectindex'
          },
          {
            snippet: 'getLoopingEffects()'
            displayText: 'getLoopingEffects()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns a table with the keys "index" and "name" for each looping effect.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/assetbundle/#getloopingeffects'
          },
          {
            snippet: 'getLuaScript()'
            displayText: 'getLuaScript()'
            type: 'function'
            leftLabel: 'string'
            description: 'Returns the Lua script for this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getluascript'
          },
          {
            snippet: 'getMaterials()'
            displayText: 'getMaterials()'
            type: 'function'
            leftLabel: 'table'
            description: 'Get all materials of an object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getmaterials'
          },
          {
            snippet: 'getMaterialsInChildren()'
            displayText: 'getMaterialsInChildren()'
            type: 'function'
            leftLabel: 'table'
            description: 'Get all materials of an object or its children.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getcomponentsinchildren'
          },
          {
            snippet: 'getName()'
            displayText: 'getName()'
            type: 'function'
            leftLabel: 'string'
            description: 'Returns the nickname for this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getname'
          },
          {
            snippet: 'getObjects()'
            displayText: 'getObjects()'
            type: 'function'
            leftLabel: 'table'
            description: 'Bag or Deck: Returns all the Objects inside of this container.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getobjects-containers'
          },
          {
            snippet: 'getObjects()\n\t' +
              '-- returns {{\n\t' +
              '--    name                      string,\n\t' +
              '--    description               string,\n\t' +
              '--    guid                      string,\n\t' +
              '--    index                     int,\n\t' +
              '--    lua_script                string,\n\t' +
              '--    lua_script_state          string\n' +
              '\t-- }}'
            displayText: 'getObjects({{string name, string description, string guid, int index, string lua_script, string lua_script_state}})'
            type: 'function'
            leftLabel: 'table'
            description: 'Bag or Deck: Returns all the Objects inside of this container.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getobjects-containers'
          },
          {
            snippet: 'getObjects(${1:bool|ignore_tags})'
            displayText: 'getObjects(bool ignore_tags)'
            type: 'function'
            leftLabel: 'table'
            description: 'Zone: Returns all the Objects inside of this zone.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getobjects-zones'
          },
          {
            snippet: 'getObjects(${1:bool|ignore_tags})\n\t' +
              '-- returns {{\n\t' +
              '--    object                    Object\n' +
              '\t-- }}'
            displayText: 'getObjects(bool ignore_tags, {{Object object}})'
            type: 'function'
            leftLabel: 'table'
            description: 'Zone: Returns all the Objects inside of this zone.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getobjects-zones'
          },
          {
            snippet: 'getPosition()'
            displayText: 'getPosition()'
            type: 'function'
            leftLabel: 'table'
            description: 'Gets the position for this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getposition'
          },
          {
            snippet: 'getPositionSmooth()'
            displayText: 'getPositionSmooth()'
            type: 'function'
            leftLabel: 'table'
            description: 'Gets the current smooth-move target position for this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getpositionsmooth'
          },
          {
            snippet: 'getQuantity()'
            displayText: 'getQuantity()'
            type: 'function'
            leftLabel: 'int'
            description: 'Returns the number of Objects in a stack.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getquantity'
          },
          {
            snippet: 'getRotation()'
            displayText: 'getRotation()'
            type: 'function'
            leftLabel: 'table'
            description: 'Gets the rotation of this Object in degrees.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getrotation'
          },
          {
            snippet: 'getRotationSmooth()'
            displayText: 'getRotationSmooth()'
            type: 'function'
            leftLabel: 'table'
            description: 'Gets the current smooth-move target rotation for this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getrotationsmooth'
          },
          {
            snippet: 'getRotationValue()'
            displayText: 'getRotationValue()'
            type: 'function'
            leftLabel: 'int'
            description: 'Returns the rotation value for this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getrotationvalue'
          },
          {
            snippet: 'getRotationValues()'
            displayText: 'getRotationValues()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns the rotation values for this Object. List of tables with Keys: "value" and "rotation".'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getrotationvalues'
          },
          {
            snippet: 'getRotationValues()\n\t' +
              '-- returns {{\n\t' +
              '--    value                     int,\n\t' +
              '--    rotation                  Vector\n' +
              '\t-- }}'
            displayText: 'getRotationValues({{int value, Vector rotation}})'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns the rotation values for this Object. List of tables with Keys: "value" and "rotation".'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getrotationvalues'
          },
          {
            snippet: 'getScale()'
            displayText: 'getScale()'
            type: 'function'
            leftLabel: 'table'
            description: 'Gets the scale for this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getscale'
          },
          {
            snippet: 'getSelectingPlayers()'
            displayText: 'getSelectingPlayers()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns a table of the Players currently selecting the Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getselectingplayers'
          },
          {
            snippet: 'getSnapPoints()'
            displayText: 'getSnapPoints()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns the snap points attached to the Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getsnappoints'
          },
          {
            snippet: 'getSnapPoints()\n\t' +
              '-- returns {{\n\t' +
              '--    position                  Vector,\n\t' +
              '--    rotation                  Vector,\n\t' +
              '--    rotation_snap             bool\n' +
              '\t-- }}'
            displayText: 'getSnapPoints({{Vector position, Vector rotation, bool rotation_snap}})'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns the snap points attached to the Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getsnappoints'
          },
          {
            snippet: 'getStateId()'
            displayText: 'getStateId()'
            type: 'function'
            leftLabel: 'int'
            description: 'Returns id of the active state for this object. Will return -1 if the object has no states.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getstateid'
          },
          {
            snippet: 'getStates()'
            displayText: 'getStates()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns a table with the keys "name", "guid", and "id".'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getstates'
          },
          {
            snippet: 'getStates()\n\t' +
              '-- returns {{\n\t' +
              '--    name                      string,\n\t' +
              '--    description               string,\n\t' +
              '--    guid                      string,\n\t' +
              '--    id                        int,\n\t' +
              '--    lua_script                string,\n\t' +
              '--    lua_script_state          string\n' +
              '\t-- }}'
            displayText: 'getStates({{string name, string description, string guid, int id, string lua_script, string lua_script_state}})'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns a table with the keys "name", "guid", and "id".'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getstates'
          },
          {
            snippet: 'getTable(${1:string|table_name})'
            displayText: 'getTable(string table_name)'
            type: 'function'
            leftLabel: 'table'
            description: 'Gets a Lua table for this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#gettable'
          },
          {
            snippet: 'getTransformForward()'
            displayText: 'getTransformForward()'
            type: 'function'
            leftLabel: 'table'
            description: 'Gets the forward direction of this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#gettransformforward'
          },
          {
            snippet: 'getTransformRight()'
            displayText: 'getTransformRight()'
            type: 'function'
            leftLabel: 'table'
            description: 'Gets the right direction of this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#gettransformright'
          },
          {
            snippet: 'getTransformUp()'
            displayText: 'getTransformUp()'
            type: 'function'
            leftLabel: 'table'
            description: 'Gets the up direction of this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#gettransformup'
          },
          {
            snippet: 'getTriggerEffects()'
            displayText: 'getTriggerEffects()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns a table with the keys "index" and "name" for each trigger effect.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/assetbundle/#gettriggereffects'
          },
          {
            snippet: 'getValue()'
            displayText: 'getValue()'
            type: 'function'
            leftLabel: 'int'
            description: 'Returns the value for this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getvalue'
          },
          {
            snippet: 'getVar(${1:string|variable_name})'
            displayText: 'getVar(string variable_name)'
            type: 'function'
            leftLabel: 'any'
            description: 'Gets a Lua variable for this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getvar'
          },
          {
            snippet: 'getVectorLines()'
            displayText: 'getVectorLines()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns the vector lines on this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getvectorlines'
          },
          {
            snippet: 'getVectorLines()\n\t' +
              '-- returns {{\n\t' +
              '--    points                    table,\n\t' +
              '--    color                     Color,\n\t' +
              '--    thickness                 float,\n\t' +
              '--    rotation                  Vector\n' +
              '\t-- }}'
            displayText: 'getVectorLines({{table points, Color color, float thickness, Vector rotation}})'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns the vector lines on this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getvectorlines'
          },
          {
            snippet: 'getVelocity()'
            displayText: 'getVelocity()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns the current velocity vector of the Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getvelocity'
          },
          {
            snippet: 'getVisualBoundsNormalized()'
            displayText: 'getVisualBoundsNormalized()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns the world space axis aligned Bounds of the Object\'s renderers at zero rotation.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getvisualboundsnormalized'
          },
          {
            snippet: 'getZones()'
            displayText: 'getZones()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns all the Zones which the object is currently inside.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#getzones'
          },
          {
            snippet: 'hasAnyTag()'
            displayText: 'hasAnyTag()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Returns whether the Object has any tag attached to it.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#hasanytag'
          },
          {
            snippet: 'hasMatchingTag(${1:Object|object})'
            displayText: 'hasMatchingTag(Object object)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Returns whether the Object and the specified other Object share at least one tag.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#hasmatchingtag'
          },
          {
            snippet: 'hasTag(${1:string|tag})'
            displayText: 'hasTag(string tag)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Returns whether the Object has the specified tag attached.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#hastag'
          },
          {
            snippet: 'highlightOff()'
            displayText: 'highlightOff()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Stop highlighting this object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#highlightoff'
          },
          {
            snippet: 'highlightOn(${1:Color|color}, ${2:float|duration})'
            displayText: 'highlightOn(Color color, float duration)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Highlight this object with color for an optional duration. Color values are between 0 and 1.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#highlighton'
          },
          {
            snippet: 'isSmoothMoving()'
            displayText: 'isSmoothMoving()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Is the object smoothly moving from our smooth functions.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#issmoothmoving'
          },
          {
            snippet: 'isDestroyed()'
            displayText: 'isDestroyed()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Returns true if the Object is (or will be) destroyed.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#isdestroyed'
          },
          {
            snippet: 'jointTo(${1:table|join})'
            displayText: 'jointTo(table join)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Joints objects together.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#jointto'
          },
          {
            snippet: 
              'jointTo({\n\t' +
              'type                      = ${1:-- string   (required - "Fixed", "Hinge", or "Spring")},\n\t' +
              'collision                 = ${2:-- bool},\n\t' +
              'break_force               = ${3:-- float},\n\t' +
              'break_torque              = ${4:-- float},\n\t' +
              'axis                      = ${5:-- Vector},\n\t' +
              'anchor                    = ${6:-- Vector},\n\t' +
              'connected_anchor          = ${7:-- Vector},\n\t' +
              'motor_force               = ${8:-- float},\n\t' +
              'motor_velocity            = ${9:-- float},\n\t' +
              'motor_free_spin           = ${10:-- bool},\n\t' +
              'spring                    = ${11:-- float    [10]},\n\t' +
              'damper                    = ${12:-- float    [0.2]},\n\t' +
              'max_distance              = ${13:-- float},\n\t' +
              'min_distance              = ${14:-- float}\n' +
              '})'
            displayText: 'jointTo({string type, bool collision, float break_force, float break_torque, Vector axis, Vector anchor, Vector connected_anchor, float motor_force, float motor_velocity, bool motor_free_spin, float spring, float damper, float max_distance, float min_distance})'
            type: 'function'
            leftLabel: 'bool'
            description: 'Joints objects together.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#jointto'
          },
          {
            snippet: 'playLoopingEffect(${1:int|index})'
            displayText: 'playLoopingEffect(int index)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Starts playing a looping effect. Index starts at 0.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/assetbundle/#playloopingeffect'
          },
          {
            snippet: 'playTriggerEffect(${1:int|index})'
            displayText: 'playTriggerEffect(int index)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Starts playing a trigger effect. Index starts at 0.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/behavior/assetbundle/#playtriggereffect'
          },
          {
            snippet: 'positionToLocal(${1:Vector|vector})'
            displayText: 'positionToLocal(Vector vector)'
            type: 'function'
            leftLabel: 'table'
            description: 'Converts the world position to a local position of this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#positiontolocal'
          },
          {
            snippet: 'positionToWorld(${1:Vector|vector})'
            displayText: 'positionToWorld(Vector vector)'
            type: 'function'
            leftLabel: 'table'
            description: 'Converts the local position of this Object to a world position.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#positiontoworld'
          },
          {
            snippet: 'putObject(${1:Object|object})'
            displayText: 'putObject(Object object)'
            type: 'function'
            leftLabel: 'Object'
            description: 'Add this object to the current object. Works for stacking chips, decks, and bags.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#putobject'
          },
          {
            snippet: 'randomize()'
            displayText: 'randomize()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Same as pressing the "R" key on an Object. Shuffles deck/bag, rolls dice/coin, lifts any other object up in the air.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#randomize'
          },
          {
            snippet: 'randomize(${1:string|player})'
            displayText: 'randomize(string player)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Same as pressing the "R" key on an Object. Triggers onObjectRandomize as if specified player hit it.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#randomize'
          },
          {
            snippet: 'registerCollisions(${1:bool|include_stay_events})'
            displayText: 'registerCollisions(bool include_stay_events)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Registers object to be checked for collisions: required for onObjectCollisionEnter etc.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#registercollisions'
          },
          {
            snippet: 'reload()'
            displayText: 'reload()'
            type: 'function'
            leftLabel: 'table'
            description: 'Reloads this object by destroying and spawning it place. Returns the newly spawned object. Very useful if using setCustomObject().'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#reload'
          },
          {
            snippet: 'removeAttachment(${1:int|index})'
            displayText: 'removeAttachment(int index)'
            type: 'function'
            leftLabel: 'Object'
            description: 'Removes a child with the given index. Use getAttachments() to find out the index property.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#removeattachment'
          },
          {
            snippet: 'removeAttachments()'
            displayText: 'removeAttachments()'
            type: 'function'
            leftLabel: 'table'
            description: 'Detaches the children of this Object. Returns a table of object references.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#removeattachments'
          },
          {
            snippet: 'removeButton(${1:int|index})'
            displayText: 'removeButton(int index)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Removes a 3D UI button from this Object by its index.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#removebutton'
          },
          {
            snippet: 'removeInput(${1:int|index})'
            displayText: 'removeInput(int index)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Removes a 3D UI text input from this Object by its index.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#removeinput'
          },
          {
            snippet: 'removeFromPlayerSelection(${1:string|player_color})'
            displayText: 'removeFromPlayerSelection(string player_color)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Remove object from player\'s selection'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#removefromplayerselection'
          },
          {
            snippet: 'removeTag(${1:string|tag})'
            displayText: 'removeTag(string tag)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Removes the specified tag from the Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#removetag'
          },
          {
            snippet: 'reset()'
            displayText: 'reset()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Resets this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#reset'
          },
          {
            snippet: 'roll()'
            displayText: 'roll()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Rolls this Object. Works on Dice and Coins.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#roll'
          },
          {
            snippet: 'rotate(${1:Vector|rotation})'
            displayText: 'rotate(Vector rotation)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Smoothly rotates this Object with the given offset in degrees.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#rotate'
          },
          {
            snippet: 'scale(${1:Vector|scale})'
            displayText: 'scale(Vector scale)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Scales this Object by the given amount.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#scale'
          },
          {
            snippet: 'scale(${1:float|scale})'
            displayText: 'scale(float scale)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Scales this Object in all axes by the given amount.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#scale'
          },
          {
            snippet: 'setAngularVelocity(${1:Vector|vector})'
            displayText: 'setAngularVelocity(Vector vector)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets the angular velocity of the object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#setangularvelocity'
          },
          {
            snippet: 'setColorTint(${1:Color|color})'
            displayText: 'setColorTint(Color color)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets the color tint for this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#setcolortint'
          },
          {
            snippet: 'setComponentVar(${1:string|component_name}, ${2:string|variable_name}, ${3:any|value})'
            displayText: 'setComponentVar(string component_name, string variable_name, any value)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Set the current value of a component of an object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#setcomponentvar'
          },
          {
            snippet: 'setCustomObject(${1:table|custom_object})'
            displayText: 'setCustomObject(table custom_object)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Used to create a Custom Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#setcustomobject'
          },
          {
            snippet: 'setDecals(${1:table|decals})'
            displayText: 'setDecals(table decals)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets which decals are on an object. This removes other decals already present; use an empty table to remove all decals.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#setdecals'
          },
          {
            snippet: 
              'setDecals({{\n\t' +
              'name                      = ${1:-- string},\n\t' +
              'url                       = ${2:-- string},\n\t' +
              'position                  = ${3:-- Vector},\n\t' +
              'rotation                  = ${4:-- Vector},\n\t' +
              'scale                     = ${5:-- float}\n' +
              '}})'
            displayText: 'setDecals({{string name, string url, Vector position, Vector rotation, float scale}})'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets which decals are on an object. This removes other decals already present; use an empty table to remove all decals.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#setdecals'
          },
          {
            snippet: 'setDescription(${1:string|description})'
            displayText: 'setDescription(string description)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets the description for this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#setdescription'
          },
          {
            snippet: 'setFogOfWarReveal(${1:table|fog_setting})'
            displayText: 'setFogOfWarReveal(table fog_setting)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets whether the object reveals fog-of-war: {bool reveal, string color, float range}'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#setfogofwarreveal'
          },
          {
            snippet: 
              'setFogOfWarReveal({\n\t' +
              'reveal                    = ${1:-- bool},\n\t' +
              'color                     = ${2:-- string},\n\t' +
              'range                     = ${3:-- float}\n' +
              '})'
            displayText: 'setFogOfWarReveal({bool reveal, string color, float range})'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets whether the object reveals fog-of-war: {bool reveal, string color, float range}'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#setfogofwarreveal'
          },
          {
            snippet: 'setGMNotes(${1:string|notes})'
            displayText: 'setGMNotes(string notes)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets the GM notes attached to this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#setgmnotes'
          },
          {
            snippet: 'setHiddenFrom(${1:table|players})'
            displayText: 'setHiddenFrom(table players)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Hides the object from the specified players as if it were in a hand zone.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#sethiddenfrom'
          },
          {
            snippet: 'setInvisibleTo(${1:table|players})'
            displayText: 'setInvisibleTo(table players)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Makes the object invisible to the specified players.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#seinvisibleto'
          },
          {
            snippet: 'setLock(${1:bool|lock})'
            displayText: 'setLock(bool lock)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Set the lock status of an object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#setlock'
          },
          {
            snippet: 'setLuaScript(${1:string|script})'
            displayText: 'setLuaScript(string script)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets the Lua script for this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#setluascript'
          },
          {
            snippet: 'setName(${1:string|nickname})'
            displayText: 'setName(string nickname)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets the nickname for this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#setname'
          },
          {
            snippet: 'setPosition(${1:Vector|position})'
            displayText: 'setPosition(Vector position)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets the world space position for this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#setposition'
          },
          {
            snippet: 'setPositionSmooth(${1:Vector|position}, ${2:bool|collide}, ${3:bool|fast})'
            displayText: 'setPositionSmooth(Vector position, bool collide, bool fast)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Smoothly moves this Object from its current position to a given world space position.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#setpositionsmooth'
          },
          {
            snippet: 'setRotation(${1:Vector|rotation})'
            displayText: 'setRotation(Vector rotation)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets the rotation of this Object in degrees.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#setrotation'
          },
          {
            snippet: 'setRotationSmooth(${1:Vector|rotation}, ${2:bool|collide}, ${3:bool|fast})'
            displayText: 'setRotationSmooth(Vector rotation, bool collide, bool fast)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Smoothly rotates this Object to the given orientation in degrees.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#setrotationsmooth'
          },
          {
            snippet: 'setRotationValues(${1:table|rotation_values})'
            displayText: 'setRotationValues(table rotation_values)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets the rotation values of this Object: {{int value, Vector rotation}, ...}'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#setrotationvalues'
          },
          {
            snippet: 
              'setRotationValues({{\n\t' +
              'value                     = ${1:-- int},\n\t' +
              'rotation                  = ${2:-- Vector}\n' +
              '}})'
            displayText: 'setRotationValues({{int value, Vector rotation}})'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets the rotation values of this Object: {{int value, Vector rotation}, ...}'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#setrotationvalues'
          },
          {
            snippet: 'setScale(${1:Vector|scale})'
            displayText: 'setScale(Vector scale)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets the scale for this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#setscale'
          },
          {
            snippet: 'setSnapPoints(${1:table|snap_points})'
            displayText: 'setSnapPoints(table snap_points)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets the snap points attached to this Object: {{Vector position, Vector rotation, bool rotation_snap}, ...}'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#setsnappoints'
          },
          {
            snippet: 
              'setSnapPoints({{\n\t' +
              'position                  = ${1:-- Vector},\n\t' +
              'rotation                  = ${2:-- Vector},\n\t' +
              'rotation_snap             = ${3:-- bool}\n' +
              '}})'
            displayText: 'setSnapPoints({{Vector position, Vector rotation, bool rotation_snap}})'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets the snap points attached to this Object: {{Vector position, Vector rotation, bool rotation_snap}, ...}'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#setsnappoints'
          },
          {
            snippet: 'setState(${1:int|state})'
            displayText: 'setState(int state)'
            type: 'function'
            leftLabel: 'Object'
            description: 'Sets the State on this Object and returns reference to the new State.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#setstate'
          },
          {
            snippet: 'setTable(${1:string|table_name}, ${2:table|lua_table})'
            displayText: 'setTable(string table_name, table lua_table)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets a Lua table for this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#settable'
          },
          {
            snippet: 'setTags(${1:table|tags})'
            displayText: 'setTags(table tags)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Replaces all tags on the Object with those specified.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#settags'
          },
          {
            snippet: 'setValue(${1:any|value})'
            displayText: 'setValue(any value)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets the value for this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#setvalue'
          },
          {
            snippet: 'setVar(${1:string|variable_name}, ${2:any|value})'
            displayText: 'setVar(string variable_name, any value)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets a Lua variable for this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#setvar'
          },
          {
            snippet: 'setVectorLines(${1:table|vector_lines})'
            displayText: 'setVectorLines(table vector_lines)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets the vector lines attached to this Object: {{table points, Color color, float thickness, Vector rotation}, ...}'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#setvectorlines'
          },
          {
            snippet: 
              'setVectorLines({{\n\t' +
              'points                    = ${1:-- table},\n\t' +
              'color                     = ${2:-- Color},\n\t' +
              'thickness                 = ${3:-- float},\n\t' +
              'rotation                  = ${4:-- Vector}\n' +
              '}})'
            displayText: 'setVectorLines({{table points, Color color, float thickness, Vector rotation}})'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets the vector lines attached to this Object: {{table points, Color color, float thickness, Vector rotation}, ...}'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#setvectorlines'
          },
          {
            snippet: 'setVelocity(${1:Vector|vector})'
            displayText: 'setVelocity(Vector vector)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets the velocity of the object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#setvelocity'
          },
          {
            snippet: 'shuffle()'
            displayText: 'shuffle()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Shuffles this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#shuffle'
          },
          {
            snippet: 'shuffleStates()'
            displayText: 'shuffleStates()'
            type: 'function'
            leftLabel: 'Object'
            description: 'Shuffles the States on this Object and returns reference to the new State.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#shufflestates'
          },
          {
            snippet: 'split(${1:int|stacks})'
            displayText: 'split(int stacks)'
            type: 'function'
            leftLabel: 'table'
            description: 'Splits a deck into the chosen number of stacks and returns created objects.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#split'
          },
          {
            snippet: 'spread(${1:float|distance})'
            displayText: 'spread(float distance)'
            type: 'function'
            leftLabel: 'table'
            description: 'Spreads the cards of a deck out on the table.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#spread'
          },
          {
            snippet: 'takeObject(${1:table|parameters})'
            displayText: 'takeObject(table parameters)'
            type: 'function'
            leftLabel: 'Object'
            description: 'Takes an Object from this container.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#takeobject'
          },
          {
            snippet: 
              'takeObject({\n\t' +
              'position                  = ${1:-- Vector   [container position, x+2]},\n\t' +
              'rotation                  = ${2:-- Vector   [container rotation]},\n\t' +
              'callback_function         = ${3:-- function},\n\t' +
              'params                    = ${4:-- table},\n\t' +
              'smooth                    = ${5:-- bool},\n\t' +
              'flip                      = ${6:-- bool},\n\t' +
              'guid                      = ${7:-- string},\n\t' +
              'index                     = ${8:-- int},\n\t' +
              'top                       = ${9:-- bool     [true]}\n' +
              '})'
            displayText: 'takeObject({Vector position, Vector rotation, function callback_function, table params, bool smooth, bool flip, string guid, int index, bool top})'
            type: 'function'
            leftLabel: 'Object'
            description: 'Takes an Object from this container.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#takeobject'
          },
          {
            snippet: 'translate(${1:Vector|position})'
            displayText: 'translate(Vector position)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Smoothly moves this Object from its current position to a given offset.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#translate'
          },
          {
            snippet: 'unregisterCollisions()'
            displayText: 'unregisterCollisions()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Unregisters object to be checked for collisions: onObjectCollisionEnter etc. will no longer work.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#unregistercollisions'
          },
        ]

      # Section: Default Events
      else if (line.startsWith('function') && not line.includes("("))
        suggestions = []
        if not global_script
          suggestions = suggestions.concat [
            {
              snippet: 'tryObjectEnter(object)\n\t${0: -- body...}\nend'
              displayText: 'tryObjectEnter(Object object)'
              type: 'function'
              leftLabel: 'bool'
              description: 'Automatically called when an Object attempts to enter this container.  If this function returns false the object will not be allowed in.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#tryobjectenter'
            },
            {
              snippet: 'onCollisionEnter(info)\n\t' +
                '-- info is {\n\t' +
                '--    collision_object          Object,\n\t' +
                '--    contact_points            table    {Vector, ...}},\n\t' +
                '--    relative_velocity         Vector\n' +
                '\t-- }\n\t$1\nend'
              displayText: 'onCollisionEnter(table info)'
              type: 'event'
              leftLabel: 'bool'
              description: 'Automatically called when this Object collides with another Object.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#oncollisionenter'
            },
            {
              snippet: 'onCollisionExit(info)\n\t' +
                '-- info is {\n\t' +
                '--    collision_object          Object,\n\t' +
                '--    contact_points            table    {Vector, ...}},\n\t' +
                '--    relative_velocity         Vector\n' +
                '\t-- }\n\t$1\nend'
              displayText: 'onCollisionExit(table info)'
              type: 'event'
              leftLabel: 'bool'
              description: 'Automatically called when this Object stops touching another Object.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#oncollisionexit'
            },
            {
              snippet: 'onCollisionStay(info)\n\t' +
                '-- info is {\n\t' +
                '--    collision_object          Object,\n\t' +
                '--    contact_points            table    {Vector, ...}},\n\t' +
                '--    relative_velocity         Vector\n' +
                '\t-- }\n\t$1\nend'
              displayText: 'onCollisionStay(table info)'
              type: 'event'
              leftLabel: 'bool'
              description: 'Automatically called when this Object is touching another Object.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#oncollisionstay'
            },
            {
              snippet: 'onDestroy()'
              displayText: 'onDestroy()'
              type: 'event'
              leftLabel: 'bool'
              description: 'Automatically called when this Object is destroyed.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#ondestroy'
            },
            {
              snippet: 'onDrop(player_color)\n\t${0: -- body...}\nend'
              displayText: 'onDrop(string player_color)'
              type: 'function'
              leftLabel: 'bool'
              description: 'Automatically called when this Object is dropped.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#ondrop'
            },
            {
              snippet: 'onGroupSort(group, reversed)\n\t${0: -- body...}\nend'
              displayText: 'onGroupSort(table group, bool reversed)'
              type: 'function'
              leftLabel: 'bool'
              description: 'Called when a group is sorted in this LayoutZone.  Return the table sorted how you want, or false to use the zones default sort.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#ongroupsort'
            },
            {
              snippet: 'onHover(player_color)\n\t${0: -- body...}\nend'
              displayText: 'onHover(string player_color)'
              type: 'function'
              leftLabel: 'bool'
              description: 'Called when a player hovers their pointer over this object.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onhover'
            },
            {
              snippet: 'onNumberTyped(player_color, number_typed)\n\t${0: -- body...}\nend'
              displayText: 'onNumberTyped(string player_color, int number_typed)'
              type: 'function'
              leftLabel: 'bool'
              description: 'Called when a player hovers their pointer over this object and types a number.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onnumbertyped'
            },
            {
              snippet: 'onPeek(player_color)\n\t${0: -- body...}\nend'
              displayText: 'onPeek(string player_color)'
              type: 'function'
              leftLabel: 'bool'
              description: 'Automatically called when this Object is peeked.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onpeek'
            },
            {
              snippet: 'onPickUp(player_color)\n\t${0: -- body...}\nend'
              displayText: 'onPickUp(string player_color)'
              type: 'function'
              leftLabel: 'bool'
              description: 'Automatically called when this Object is picked up.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onpickup'
            },
            {
              snippet: 'onRandomize(player_color)\n\t${0: -- body...}\nend'
              displayText: 'onRandomize(string player_color)'
              type: 'function'
              leftLabel: 'bool'
              description: 'Automatically called when this Object is randomized.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onrandomze'
            },
            {
              snippet: 'tryRandomize(player_color)\n\t${0: -- body...}\nend'
              displayText: 'tryRandomize(string player_color)'
              type: 'function'
              leftLabel: 'bool'
              description: 'Called when a player attempts to randomize the script-owner Object. Return false to prevent the randomization taking place.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#tryrandomize'
            },
            {
              snippet: 'onRotate(spin, flip, player_color, old_spin, old_flip)\n\t${0: -- body...}\nend'
              displayText: 'onRotate(float spin, float flip, string player_color, float old_spin, float old_flip)'
              type: 'function'
              leftLabel: 'bool'
              description: 'Automatically called after a player rotates this object.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onrotate'
            },
            {
              snippet: 'tryRotate(spin, flip, player_color, old_spin, old_flip)\n\t${0: -- body...}\nend'
              displayText: 'tryRotate(float spin, float flip, string player_color, float old_spin, float old_flip)'
              type: 'function'
              leftLabel: 'bool'
              description: 'Automatically called when a player attempts to rotate this object.  If this function returns false the rotation will be cancelled.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#tryrotate'
            },
            {
              snippet: 'onSearchStart(player_color)\n\t${0: -- body...}\nend'
              displayText: 'onSearchStart(string player_color)'
              type: 'function'
              leftLabel: 'bool'
              description: 'Automatically called when player_color starts to search this object.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onsearchstart'
            },
            {
              snippet: 'onSearchEnd(player_color)\n\t${0: -- body...}\nend'
              displayText: 'onSearchEnd(string player_color)'
              type: 'function'
              leftLabel: 'bool'
              description: 'Automatically called when player_color stops searching this object.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onsearchend'
            },
            {
              snippet: 'onStateChange(old_guid)\n\t${0: -- body...}\nend'
              displayText: 'onStateChange(string old_guid)'
              type: 'function'
              leftLabel: 'bool'
              description: 'Called when this object appears because of a state change.'
              descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onstatechanged'
            },
          ]
        suggestions = suggestions.concat [
          {
            snippet: 'tryObjectEnterContainer(container, object)\n\t${0: -- body...}\nend'
            displayText: 'tryObjectEnterContainer(Object container, Object object)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Automatically called when an Object attempts to enter any container.  If this function returns false the object will not be allowed in.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#tryobjectentercontainer'
          },
          {
            snippet: 'onBlindfold(player, blindfolded)\n\t${0: -- body...}\nend'
            displayText: 'onBlindfold(Player player, bool blindfolded)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Called when a player puts on or takes off their blindfold.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onblindfold'
          },
          {
            snippet: 'onChat(message, player)\n\t${0: -- body...}\nend'
            displayText: 'onChat(string message, Player player)'
            type: 'function'
            leftLabel: 'bool'
            description: 'This function is called every time a player sends a chat message.  Return false to cancel that message.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onchat'
          },
          {
            snippet: 'onExternalMessage(message)\n\t${0: -- body...}\nend'
            displayText: 'onExternalMessage(table message)'
            type: 'function'
            leftLabel: 'bool'
            description: 'This function called when a message is received from the External Editor API.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/externaleditorapi/'
          },
          {
            snippet: 'onFixedUpdate()'
            displayText: 'onFixedUpdate()'
            type: 'event'
            leftLabel: 'bool'
            description: 'This function is called, if it exists in your script, every physics tick which happens 90 times a second.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onfixedupdate'
          },
          {
            snippet: 'onLoad(save_state)\n\t${0: -- body...}\nend'
            displayText: 'onLoad(string save_state)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Automatically called when a game save is finished loading every Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onload'
          },
          {
            snippet: 'onObjectCollisionEnter(object, info)\n\t' +
              '-- info is object, {\n\t' +
              '--    collision_object          Object,\n\t' +
              '--    contact_points            table    {Vector, ...}},\n\t' +
              '--    relative_velocity         Vector\n' +
              '\t-- }\n\t$1\nend'
            displayText: 'onObjectCollisionEnter(Object object, table info)'
            type: 'event'
            leftLabel: 'bool'
            description: 'Automatically called when an Object collides with another Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onobjectcollisionenter'
          },
          {
            snippet: 'onObjectCollisionStay(object, info)\n\t' +
              '-- info is object, {\n\t' +
              '--    collision_object          Object,\n\t' +
              '--    contact_points            table    {Vector, ...}},\n\t' +
              '--    relative_velocity         Vector\n' +
              '\t-- }\n\t$1\nend'
            displayText: 'onObjectCollisionStay(Object object, table info)'
            type: 'event'
            leftLabel: 'bool'
            description: 'Automatically called when an Object is touching another Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onobjectcollisionstay'
          },
          {
            snippet: 'onObjectCollisionExit(object, info)\n\t' +
              '-- info is object, {\n\t' +
              '--    collision_object          Object,\n\t' +
              '--    contact_points            table    {Vector, ...}},\n\t' +
              '--    relative_velocity         Vector\n' +
              '\t-- }\n\t$1\nend'
            displayText: 'onObjectCollisionExit(Object object, table info)'
            type: 'event'
            leftLabel: 'bool'
            description: 'Automatically called when an Object stops touching another Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onobjectcollisionexit'
          },
          {
            snippet: 'onObjectDestroy(object)\n\t${0: -- body...}\nend'
            displayText: 'onObjectDestroy(Object object)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Automatically called when an Object is destroyed.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onobjectdestroy'
          },
          {
            snippet: 'onObjectDrop(player_color, object)\n\t${0: -- body...}\nend'
            displayText: 'onObjectDrop(string player_color, Object object)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Automatically called when an Object is dropped.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onobjectdrop'
          },
          {
            snippet: 'onObjectEnterContainer(container, object)\n\t${0: -- body...}\nend'
            displayText: 'onObjectEnterContainer(Object container, Object object)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Automatically called when an Object enters any container(Deck, Bag, Chip Stack, etc).'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onobjectentercontainer'
          },
          {
            snippet: 'onObjectEnterScriptingZone(zone, object)\n\t${0: -- body...}\nend'
            displayText: 'onObjectEnterScriptingZone(Object zone, Object object)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Automatically called when an Object enters a Scripting Zone.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onobjectenterscriptingzone'
          },
          {
            snippet: 'onObjectEnterZone(zone, object)\n\t${0: -- body...}\nend'
            displayText: 'onObjectEnterZone(Object zone, Object object)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Automatically called when an Object enters any Zone.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onobjectenterzone'
          },
          {
            snippet: 'onObjectHover(player_color, object)\n\t${0: -- body...}\nend'
            displayText: 'onObjectHover(string player_color, Object object)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Called when a player hovers their pointer over an object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onobjecthover'
          },
          {
            snippet: 'onObjectLeaveContainer(container, object)\n\t${0: -- body...}\nend'
            displayText: 'onObjectLeaveContainer(Object container, Object object)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Automatically called when an Object leaves any container(Deck, Bag, Chip Stack, etc).'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onobjectleavecontainer'
          },
          {
            snippet: 'onObjectLeaveScriptingZone(zone, object)\n\t${0: -- body...}\nend'
            displayText: 'onObjectLeaveScriptingZone(Object zone, Object object)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Automatically called when an Object leaves a Scripting Zone.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onobjectleavescriptingzone'
          },
          {
            snippet: 'onObjectLeaveZone(zone, object)\n\t${0: -- body...}\nend'
            displayText: 'onObjectLeaveZone(Object zone, Object object)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Automatically called when an Object leaves any Zone.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onobjectleavezone'
          },
          {
            snippet: 'onObjectLoopingEffect(object, index)\n\t${0: -- body...}\nend'
            displayText: 'onObjectLoopingEffect(Object object, int index)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Automatically called when an asset Object\'s loop is started.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onobjectloopingeffect'
          },
          {
            snippet: 'onObjectNumberTyped(object, player_color, number_typed)\n\t${0: -- body...}\nend'
            displayText: 'onObjectNumberTyped(Object object, string player_color, int number_typed)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Called when a player hovers their pointer over an object and types a number.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onobjectnumbertyped'
          },
          {
            snippet: 'onObjectPeek(object, player_color)\n\t${0: -- body...}\nend'
            displayText: 'onObjectPeek(Object object, string player_color)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Automatically called when an Object is peeked.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onobjectpeek'
          },
          {
            snippet: 'onObjectPickUp(player_color, object)\n\t${0: -- body...}\nend'
            displayText: 'onObjectPickUp(string player_color, Object object)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Automatically called when an Object is picked up.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onobjectpickup'
          },
          {
            snippet: 'onObjectRandomize(object, player_color)\n\t${0: -- body...}\nend'
            displayText: 'onObjectRandomize(Object object, string player_color)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Automatically called when an asset Object is randomized by player_color.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onobjectrandomize'
          },
          {
            snippet: 'tryObjectRandomize(object, player_color)\n\t${0: -- body...}\nend'
            displayText: 'tryObjectRandomize(Object object, string player_color)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Called when a player attempts to randomize an Object. Return false to prevent the Object being randomized.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#tryobjectrandomize'
          },
          {
            snippet: 'onObjectRotate(object, spin, flip, player_color, old_spin, old_flip)\n\t${0: -- body...}\nend'
            displayText: 'onObjectRotate(Object object, float spin, float flip, string player_color, float old_spin, float old_flip)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Automatically called after a player rotates an object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onobjectrotate'
          },
          {
            snippet: 'tryObjectRotate(object, spin, flip, player_color, old_spin, old_flip)\n\t${0: -- body...}\nend'
            displayText: 'tryObjectRotate(Object object, float spin, float flip, string player_color, float old_spin, float old_flip)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Automatically called when a player attempts to rotate an object.  If this function returns false the rotation will be cancelled.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#tryobjectrotate'
          },
          {
            snippet: 'onObjectSearchStart(object, player_color)\n\t${0: -- body...}\nend'
            displayText: 'onObjectSearchStart(Object object, string player_color)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Automatically called when player_color starts searching asset object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onobjectsearchstart'
          },
          {
            snippet: 'onObjectSearchEnd(object, player_color)\n\t${0: -- body...}\nend'
            displayText: 'onObjectSearchEnd(Object object, string player_color)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Automatically called when player_color stops searching asset object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onobjectsearchend'
          },
          {
            snippet: 'onObjectSpawn(object)\n\t${0: -- body...}\nend'
            displayText: 'onObjectSpawn(Object object)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Automatically called when an Object is spawned.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onobjectspawn'
          },
          {
            snippet: 'onObjectStateChange(object, old_guid)\n\t${0: -- body...}\nend'
            displayText: 'onObjectStateChange(Object object, string old_guid)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Called when an object changes state.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onobjectstatechanged'
          },
          {
            snippet: 'onObjectTriggerEffect(object, index)\n\t${0: -- body...}\nend'
            displayText: 'onObjectTriggerEffect(Object object, int index)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Automatically called when an asset Object is triggered.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onobjecttriggereffect'
          },
          {
            snippet: 'onPlayerAction(player, action, targets)\n\t${0: -- body...}\nend'
            displayText: 'onPlayerAction(Player player, Action action, table targets)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Called when a player attempts to perform an action. Return false to prevent the action\'s default behavior.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onplayeraction'
          },
          {
            snippet: 'onPlayerChangeColor(player_color)\n\t${0: -- body...}\nend'
            displayText: 'onPlayerChangeColor(string player_color)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Automatically called when a Player changes color.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onplayerchangecolor'
          },
          {
            snippet: 'onPlayerChangeTeam(player_color, team)\n\t${0: -- body...}\nend'
            displayText: 'onPlayerChangeTeam(string player_color, string team)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Automatically called when a Player changes team.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onplayerchangeteam'
          },
          {
            snippet: 'onPlayerChatTyping()'
            displayText: 'onPlayerChatTyping()'
            type: 'event'
            leftLabel: 'bool'
            description: 'Automatically called when a Player starts or stops typing.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onplayerchattyping'
          },
          {
            snippet: 'onPlayerConnect(player_id)\n\t${0: -- body...}\nend'
            displayText: 'onPlayerConnect(int player_id)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Automatically called when a Player connects.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onplayerconnect'
          },
          {
            snippet: 'onPlayerDisconnect(player_id)\n\t${0: -- body...}\nend'
            displayText: 'onPlayerDisconnect(int player_id)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Automatically called when a Player disconnects.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onplayerdisconnect'
          },
          {
            snippet: 'onPlayerPing(player_color, position, object)\n\t${0: -- body...}\nend'
            displayText: 'onPlayerPing(string player_color, Vector position, Object object)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Automatically called when a player pings the table.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onplayerping'
          },
          {
            snippet: 'onPlayerTurn(next_player, prev_player)\n\t${0: -- body...}\nend'
            displayText: 'onPlayerTurn(Player next_player, Player prev_player)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Automatically called at the end of a Player\'s turn.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onplayerturn'
          },
          {
            snippet: 'onSave()'
            displayText: 'onSave()'
            type: 'event'
            leftLabel: 'bool'
            description: 'Automatically called when the game saves (including auto-save for Rewinding).'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onsave'
          },
          {
            snippet: 'onScriptingButtonDown(index, player_color)\n\t${0: -- body...}\nend'
            displayText: 'onScriptingButtonDown(int index, string player_color)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Automatically called when a player presses down one of the scripting button hotkeys.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onscriptingbuttondown'
          },
          {
            snippet: 'onScriptingButtonUp(index, player_color)\n\t${0: -- body...}\nend'
            displayText: 'onScriptingButtonUp(int index, string player_color)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Automatically called when a player releases one of the scripting button hotkeys.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onscriptingbuttonup'
          },
          {
            snippet: 'onUpdate()'
            displayText: 'onUpdate()'
            type: 'event'
            leftLabel: 'bool'
            description: 'Automatically called once every frame.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onupdate'
          },
          {
            snippet: 'onZoneGroupSort(zone, group, reversed)\n\t${0: -- body...}\nend'
            displayText: 'onZoneGroupSort(Object zone, table group, bool reversed)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Called when a group is sorted in LayoutZone zone.  Return the table sorted how you want, or false to use the zone\'s default sort.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/events/#onzonegroupsort'
          },
        ]

      # Section: Globally accessible constants & functions
      else if (not (line.endsWith("}") || line.endsWith(")") || line.endsWith("]"))) and not line.includes("function ") and not this_token.includes("for ") and line.match(/\w$/)
        suggestions = [
          {
            snippet: 'Backgrounds'
            displayText: 'Backgrounds'
            type: 'constant'
            leftLabel: 'class'
            description: 'The Backgrounds class.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/backgrounds/'
          },
          {
            snippet: 'bit32'
            displayText: 'bit32'
            type: 'constant'
            leftLabel: 'class'
            description: 'The bit32 class.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#6.7'
          },
          {
            snippet: 'coroutine'
            displayText: 'coroutine'
            type: 'constant'
            leftLabel: 'class'
            description: 'The coroutine class.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#6.2'
          },
          {
            snippet: 'dynamic'
            displayText: 'dynamic'
            type: 'constant'
            leftLabel: 'class'
            description: 'The dynamic class.'
            descriptionMoreURL: 'http://www.moonsharp.org/additions.html'
          },
          {
            snippet: 'Global'
            displayText: 'Global'
            type: 'constant'
            leftLabel: 'class'
            description: 'A reference to the Global Script.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/'
          },
          {
            snippet: 'Info'
            displayText: 'Info'
            type: 'constant'
            leftLabel: 'class'
            description: 'The Info class.'
            descriptionMoreURL: 'info'
          },
          {
            snippet: 'JSON'
            displayText: 'JSON'
            type: 'constant'
            leftLabel: 'class'
            description: 'The JSON class.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/json/'
          },
          {
            snippet: 'Lighting'
            displayText: 'Lighting'
            type: 'constant'
            leftLabel: 'class'
            description: 'The Lighting class.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/lighting/'
          },
          {
            snippet: 'math'
            displayText: 'math'
            type: 'constant'
            leftLabel: 'class'
            description: 'The math class.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#6.6'
          },
          {
            snippet: 'Notes'
            displayText: 'Notes'
            type: 'constant'
            leftLabel: 'class'
            description: 'The Notes class.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/notes/'
          },
          {
            snippet: 'os'
            displayText: 'os'
            type: 'constant'
            leftLabel: 'class'
            description: 'The os class.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#6.9'
          },
          {
            snippet: 'Physics'
            displayText: 'Physics'
            type: 'constant'
            leftLabel: 'class'
            description: 'The Physics class.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/physics/'
          },
          {
            snippet: 'Player'
            displayText: 'Player'
            type: 'constant'
            leftLabel: 'class'
            description: 'The Player class.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/player/manager/'
          },
          {
            snippet: 'self'
            displayText: 'self'
            type: 'constant'
            leftLabel: 'class'
            description: 'A reference to this Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/'
          },
          {
            snippet: 'string'
            displayText: 'string'
            type: 'constant'
            leftLabel: 'class'
            description: 'The string class.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#6.4'
          },
          {
            snippet: 'table'
            displayText: 'table'
            type: 'constant'
            leftLabel: 'class'
            description: 'The table class.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#6.5'
          },
          {
            snippet: 'Tables'
            displayText: 'Tables'
            type: 'constant'
            leftLabel: 'class'
            description: 'The Tables class.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/tables/'
          },
          {
            snippet: 'Time'
            displayText: 'Time'
            type: 'constant'
            leftLabel: 'class'
            description: 'The Time class.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/time/'
          },
          {
            snippet: 'Turns'
            displayText: 'Turns'
            type: 'constant'
            leftLabel: 'class'
            description: 'The Turns class.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/turns/'
          },
          {
            snippet: 'UI'
            displayText: 'UI'
            type: 'constant'
            leftLabel: 'class'
            description: 'The UI class.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/ui/'
          },
          {
            snippet: 'Wait'
            displayText: 'Wait'
            type: 'constant'
            leftLabel: 'class'
            description: 'The Wait class.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/wait/'
          },
          {
            snippet: 'WebRequest'
            displayText: 'WebRequest'
            type: 'constant'
            leftLabel: 'class'
            description: 'The WebRequest class.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/webrequest/manager/'
          },
          {
            snippet: 'addContextMenuItem(${1:string|label}, ${2:function|f}, ${3:bool|keep_open}, ${4:bool|require_table})'
            displayText: 'addContextMenuItem(string label, function f, bool keep_open, bool require_table)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Add a global context menu item.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#addcontextmenuitem'
          },
          {
            snippet: 'addHotkey(${1:string|label}, ${2:function|f}, ${3:bool|trigger_on_key_up})'
            displayText: 'addHotkey(string label, function f, bool trigger_on_key_up)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Add a user-assignable hotkey.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#addhotkey'
          },
          {
            snippet: 'broadcastToAll(${1:string|message}, ${2:Color|text_color})'
            displayText: 'broadcastToAll(string message, Color text_color)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Prints a message to the screen and chat window on all connected clients.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#broadcasttoall'
          },
          {
            snippet: 'broadcastToColor(${1:string|message}, ${2:string|player_color}, ${3:Color|text_color})'
            displayText: 'broadcastToColor(string message, string player_color, Color text_color)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Prints a private message to the screen and chat window to the player matching the player color.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#broadcasttocolor'
          },
          {
            snippet: 'clearContextMenu()'
            displayText: 'clearContextMenu()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Clears add global context menu items.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#clearcontextmenu'
          },
          {
            snippet: 'clearHotkeys()'
            displayText: 'clearHotkeys()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Clears user assignable hotkeys.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#clearhotkeys'
          },
          {
            snippet: 'clearPixelPaint()'
            displayText: 'clearPixelPaint()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Clears all pixel paint.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#clearpixelpaint'
          },
          {
            snippet: 'clearVectorPaint()'
            displayText: 'clearVectorPaint()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Clears all vector paint.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#clearvectorpaint'
          },
          {
            snippet: 'color(${1:float|red}, ${2:float|green}, ${3:float|blue}, ${4:float|alpha})'
            displayText: 'color(float red, float green, float blue, float alpha)'
            type: 'function'
            leftLabel: 'Color'
            description: 'Creates a Color table from rgb[a] values (alpha is optional).'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#color'
          },
          {
            snippet: 'copy(${1:table|objects})'
            displayText: 'copy(table objects)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Copies a list of Objects.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#copy'
          },
          {
            snippet: 'destroyObject(${1:Object|obj})'
            displayText: 'destroyObject(Object obj)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Destroys an Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#destroyobject'
          },
          {
            snippet: 'flipTable()'
            displayText: 'flipTable()'
            type: 'function'
            leftLabel: 'bool'
            description: 'Flip the table in a fit of rage.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#fliptable'
          },
          {
            snippet: 'getObjects()'
            displayText: 'getObjects()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns a table of all the spawned Objects in the game.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#getobjects'
          },
          {
            snippet: 'getObjectFromGUID(${1:string|guid})'
            displayText: 'getObjectFromGUID(string guid)'
            type: 'function'
            leftLabel: 'Object'
            description: 'Gets a reference to an Object from a GUID. Will return nil if the Object doesn\'t exist.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#getobjectfromguid'
          },
          {
            snippet: 'getObjectsWithAllTags(${1:table|tags})'
            displayText: 'getObjectsWithAllTags(table tags)'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns Table of all Objects which have all of the specified tags attached.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#getobjectswithalltags'
          },
          {
            snippet: 
              'getObjectsWithAllTags({\n\t' +
              'tag                       = ${1:-- string}\n' +
              '})'
            displayText: 'getObjectsWithAllTags({string tag})'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns Table of all Objects which have all of the specified tags attached.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#getobjectswithalltags'
          },
          {
            snippet: 'getObjectsWithAnyTags(${1:table|tags})'
            displayText: 'getObjectsWithAnyTags(table tags)'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns Table of all Objects which have at least one of the specified tags attached.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#getobjectswithanytags'
          },
          {
            snippet: 
              'getObjectsWithAnyTags({\n\t' +
              'tag                       = ${1:-- string}\n' +
              '})'
            displayText: 'getObjectsWithAnyTags({string tag})'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns Table of all Objects which have at least one of the specified tags attached.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#getobjectswithanytags'
          },
          {
            snippet: 'getObjectsWithTag(${1:string|tag})'
            displayText: 'getObjectsWithTag(string tag)'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns Table of all Objects which have the specified tag attached.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#getobjectswithtag'
          },
          {
            snippet: 'getSeatedPlayers()'
            displayText: 'getSeatedPlayers()'
            type: 'function'
            leftLabel: 'table'
            description: 'Returns an indexed Lua table of all the seated Player colors.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#getseatedplayers'
          },
          {
            snippet: 'log(${1:any|message}, ${2:string|tag}, ${3:string|label})'
            displayText: 'log(any message, string tag, string label)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Outputs a message to the system console. Specify a tag to identify it by class or subject, and label to prefix the value.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#log'
          },
          {
            snippet: 'logString(${1:any|message}, ${2:string|tag}, ${3:string|label})'
            displayText: 'logString(any message, string tag, string label)'
            type: 'function'
            leftLabel: 'string'
            description: 'Returns the string which "log" would output.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#logstring'
          },
          {
            snippet: 'logStyle(${1:string|tag}, ${2:Color|color}, ${3:string|prefix}, ${4:string|postfix})'
            displayText: 'logStyle(string tag, Color color, string prefix, string postfix)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sets the style options for the specified tag: the color it is displayed in and any prefix or postfix text.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#logstyle'
          },
          {
            snippet: 'group(${1:table|objects})'
            displayText: 'group(table objects)'
            type: 'function'
            leftLabel: 'Object'
            description: 'Groups objects together into returned Object.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#group'
          },
          {
            snippet: 'paste(${1:table|parameters})'
            displayText: 'paste(table parameters)'
            type: 'function'
            leftLabel: 'table'
            description: 'Pastes copied Objects and returns a table of references to the new Objects.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#paste'
          },
          {
            snippet: 
              'paste({\n\t' +
              'position                  = ${1:-- Vector   [x=0, y=3, z=0]},\n\t' +
              'snap_to_grid              = ${2:-- bool     [false]}\n' +
              '})'
            displayText: 'paste({Vector position, bool snap_to_grid})'
            type: 'function'
            leftLabel: 'table'
            description: 'Pastes copied Objects and returns a table of references to the new Objects.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#paste'
          },
          {
            snippet: 'print(${1:string|message})'
            displayText: 'print(string message)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Prints a message to the chat window only on the host.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#print'
          },
          {
            snippet: 'printToAll(${1:string|message}, ${2:Color|text_color})'
            displayText: 'printToAll(string message, Color text_color)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Prints a message to the chat window on all connected clients.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#printtoall'
          },
          {
            snippet: 'printToColor(${1:string|message}, ${2:string|player_color}, ${3:Color|text_color})'
            displayText: 'printToColor(string message, string player_color, Color text_color)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Prints a message to the chat window of a specific Player.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#printtocolor'
          },
          {
            snippet: 'sendExternalMessage(${1:table|table})'
            displayText: 'sendExternalMessage(table table)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Sends table to whatever is connected to the External Editor API.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/externaleditorapi/'
          },
          {
            snippet: 'spawnObject(${1:table|parameters})'
            displayText: 'spawnObject(table parameters)'
            type: 'function'
            leftLabel: 'Object'
            description: 'Spawns an Object and returns a reference to it.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#spawnobject'
          },
          {
            snippet: 
              'spawnObject({\n\t' +
              'type                      = ${1:-- string},\n\t' +
              'position                  = ${2:-- Vector   [x=0, y=3, z=0]},\n\t' +
              'rotation                  = ${3:-- Vector   [x=0, y=0, z=0]},\n\t' +
              'scale                     = ${4:-- Vector   [x=1, y=1, z=1]},\n\t' +
              'callback_function         = ${5:-- function},\n\t' +
              'sound                     = ${6:-- bool},\n\t' +
              'params                    = ${7:-- table},\n\t' +
              'snap_to_grid              = ${8:-- bool}\n' +
              '})'
            displayText: 'spawnObject({string type, Vector position, Vector rotation, Vector scale, function callback_function, bool sound, table params, bool snap_to_grid})'
            type: 'function'
            leftLabel: 'Object'
            description: 'Spawns an Object and returns a reference to it.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#spawnobject'
          },
          {
            snippet: 'spawnObjectData(${1:table|parameters})'
            displayText: 'spawnObjectData(table parameters)'
            type: 'function'
            leftLabel: 'Object'
            description: 'Spawns an Object using an Object Data Table and returns a reference to it.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#spawnobjectdata'
          },
          {
            snippet: 
              'spawnObjectData({\n\t' +
              'data                      = ${1:-- table},\n\t' +
              'position                  = ${2:-- Vector},\n\t' +
              'rotation                  = ${3:-- Vector},\n\t' +
              'scale                     = ${4:-- Vector},\n\t' +
              'callback_function         = ${5:-- function}\n' +
              '})'
            displayText: 'spawnObjectData({table data, Vector position, Vector rotation, Vector scale, function callback_function})'
            type: 'function'
            leftLabel: 'Object'
            description: 'Spawns an Object using an Object Data Table and returns a reference to it.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#spawnobjectdata'
          },
          {
            snippet: 'spawnObjectJSON(${1:table|parameters})'
            displayText: 'spawnObjectJSON(table parameters)'
            type: 'function'
            leftLabel: 'Object'
            description: 'Spawns an Object using a JSON string and returns a reference to it.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#spawnobjectjson'
          },
          {
            snippet: 
              'spawnObjectJSON({\n\t' +
              'json                      = ${1:-- string},\n\t' +
              'position                  = ${2:-- Vector   [x=0, y=3, z=0]},\n\t' +
              'rotation                  = ${3:-- Vector   [x=0, y=0, z=0]},\n\t' +
              'scale                     = ${4:-- Vector   [x=1, y=1, z=1]},\n\t' +
              'callback_function         = ${5:-- string},\n\t' +
              'sound                     = ${6:-- bool},\n\t' +
              'params                    = ${7:-- table},\n\t' +
              'snap_to_grid              = ${8:-- bool}\n' +
              '})'
            displayText: 'spawnObjectJSON({string json, Vector position, Vector rotation, Vector scale, string callback_function, bool sound, table params, bool snap_to_grid})'
            type: 'function'
            leftLabel: 'Object'
            description: 'Spawns an Object using a JSON string and returns a reference to it.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#spawnobjectjson'
          },
          {
            snippet: 'startLuaCoroutine(${1:Object|func_owner}, ${2:string|func_name})'
            displayText: 'startLuaCoroutine(Object func_owner, string func_name)'
            type: 'function'
            leftLabel: 'bool'
            description: 'Starts a Lua function as a coroutine.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#startluacoroutine'
          },
          {
            snippet: 'stringColorToRGB(${1:string|player_color})'
            displayText: 'stringColorToRGB(string player_color)'
            type: 'function'
            leftLabel: 'table'
            description: 'Converts a color string (player colors) to its RGB values.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#stringcolortorgb'
          },
          {
            snippet: 'tonumber(${1:string|s})'
            displayText: 'tonumber(string s)'
            type: 'function'
            leftLabel: 'number'
            description: 'When called with no base, tonumber tries to convert its argument to a number.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-tonumber'
          },
          {
            snippet: 'tostring(${1:any|x})'
            displayText: 'tostring(any x)'
            type: 'function'
            leftLabel: 'number'
            description: 'Receives a value of any type and converts it to a string in a reasonable format.'
            descriptionMoreURL: 'https://www.lua.org/manual/5.2/manual.html#pdf-tostring'
          },
          {
            snippet: 'vector(${1:float|x}, ${2:float|y}, ${3:float|z})'
            displayText: 'vector(float x, float y, float z)'
            type: 'function'
            leftLabel: 'Vector'
            description: 'Creates a Vector table from x, y, z values.'
            descriptionMoreURL: 'https://api.tabletopsimulator.com/object/#vector'
          },
        ]


      # Add smart getObjectFromGUID after static getObjectFromGUID if appropriate
      if this_token.includes('=')
        for suggestion, index in suggestions
          if suggestion.snippet.startsWith('getObjectFromGUID')
            identifier = line.match(/([^\s]+)\s*=[^=]*$/)[1]
            guid_string =  atom.config.get('tabletopsimulator-lua.style.guidPostfix')
            insertion_point = index
            if identifier.match(/.*\w$/)
              insertion_point = insertion_point + 1
              suggestion = identifier + guid_string
              suggestions.splice(insertion_point, 0,
                    {
                      snippet: 'getObjectFromGUID(' + suggestion + ')'
                      displayText: 'getObjectFromGUID(->' +  suggestion + ')'
                      type: 'function'
                      leftLabel: 'Object'
                      description: 'Gets a reference to an Object from a GUID. Will return nil if the Object doesn’t exist.'
                      descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#getobjectfromguid'
                    }
              )
            for c, i in identifier
              if c.match(/[^\w]/)
                pre  = identifier.substring(0, i)
                post = identifier.substring(i)
                if pre.match(/.*\w$/)
                  insertion_point = insertion_point + 1
                  suggestion = pre + guid_string + post
                  suggestions.splice(insertion_point, 0,
                        {
                          snippet: 'getObjectFromGUID(' + suggestion + ')'
                          displayText: 'getObjectFromGUID(->' +  suggestion + ')'
                          type: 'function'
                          leftLabel: 'Object'
                          description: 'Gets a reference to an Object from a GUID. Will return nil if the Object doesn’t exist.'
                          descriptionMoreURL: 'https://api.tabletopsimulator.com/base/#getobjectfromguid'
                        }
                  )
            break

      # Convert function parameters to user desired output
      match_pattern = /\${([0-9]+):([0-9a-zA-Z_]+)\|([0-9a-zA-Z_]+)}/g
      replace_type = atom.config.get('tabletopsimulator-lua.autocomplete.parameterToDisplay')
      if replace_type == 'both'
        replace_pattern = (match, index, parameter_type, parameter_name) ->
          format = atom.config.get('tabletopsimulator-lua.style.parameterFormat')
          format = format.replace("TYPE", parameter_type.toUpperCase())
          format = format.replace("Type", capitalize(parameter_type))
          format = format.replace("type", parameter_type)
          format = format.replace("NAME", parameter_name.toUpperCase())
          format = format.replace("Name", capitalize(parameter_name))
          format = format.replace("name", parameter_name)
          return '${' + index + ':' + format + '}'
      else
        replace_pattern = parameter_patterns[replace_type]
      for suggestion in suggestions
          suggestion.snippet = suggestion.snippet.replace(match_pattern, replace_pattern)

      resolve(suggestions)


# Replacement patterns for autocomplete parameters
parameter_patterns = {
  'type': '$${$1:$2}',
  'name': '$${$1:$3}',
  'both': '$${$1:$2_$3}',
  'none': '$${$1:}',
}

# First letter to caps
capitalize = (s) ->
  return s.substring(0,1).toUpperCase() + s.substring(1)
